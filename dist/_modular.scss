// Enable JSON output?
$to-JSON : false !default;

// Output config for each module by default?
$output-JSON : false !default;
 
$config-JSON : ();

$module : null;

// Set the default selector type (flex | chain | static)
$type : 'flex';

// Extend each option as a modifier by default?
$extend-options : true;
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin module
 *
 * @description Create a new module
 *
 * @param $modules - The module(s) you wish to create
 * @param $type    - 'static' | 'chain' | 'flex' 
 */

//  Usage
//
//  @include module(header) {
//      ...
//  }
//
//  <div class="header">...</div>

@mixin module($modules: map-get($config, 'name'), $type: map-get($config, 'selector-type')) {
    $module: $modules !global;
    $selectors: ();
    @each $module in $modules {
        @if $type == 'flex' or $type == 'static' {
            $selectors: join($selectors, '.#{$module}', comma);
        }
        @if $type == 'flex' or $type == 'chain' {
            $selectors: join($selectors, '[class*="#{$module}-"]', comma);
        }
    }
    #{$selectors} {
        @content;
    }
}

// Alias for multiple modules
@mixin modules($modules, $type: $type) {
    @include module($modules, $type) {
        @content;
    }
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin component
 *
 * @description Create a component based off the main module
 *
 * @param $components - The component or components to be used
 */

//  Usage
//
//  @include module(header) {
//      @include component(wrapper) {
//          ...
//      }
//  }
//
//  <div class="header_wrapper">...</div>

@mixin component($components: null) {
    $selectors: '[class*="#{$module}_"]';
    @if $components {
        $selectors: ();
        @each $component in $components {
            $selectors: join($selectors, '[class*="#{$module}_#{$component}"]', comma);
        }
    }
    @at-root {
        #{$selectors} {
            @content;
        }
    }	
}

// Alias for multiple components
@mixin components($sub-components) {
    @include component($sub-components) {
        @content;
    }
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin modifier
 *
 * @description Create a modifier for a module
 *
 * @param $modifiers - The modifier(s) which you wish to create
 * @param $special   - 'not' | 
 */

//  Usage
//
//  @include module(button) {
//      @include modifier(large) {
//          ...
//      }
//  }
//
//  <div class="button-large">...</div>

@mixin modifier($modifiers, $special: null) {
    
    $selectors: &;
    
    @if nth(&, 1) + unquote('') == '.#{$module}' {
        @if map-get($config, 'selector-type') == 'flex' {
            $selectors: ();
            $i: 1;
            @each $item in & {
                $i: $i + 1;
                @if $i == 2 {
                    $i: 0;
                } @else {
                    $selectors: append($selectors, $item, comma);
                }
            }
        }
    }
    
    @at-root #{$selectors} {
        $modifier-selectors: ();
        @each $modifier in $modifiers {
            @if $special == "not" {
                $modifier-selectors: join($modifier-selectors, '&:not([class*="-#{$modifier}"])', comma);
            } @else {
                $modifier-selectors: join($modifier-selectors, '&[class*="-#{$modifier}"]', comma);
            }
        }
        #{$modifier-selectors} {
            @content;
        }
    }

} // modifier()

// Alias for multiple modifiers
@mixin modifiers($modifiers) {
    @include modifier($modifiers) {
        @content;
    }
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin overwrite
 *
 * @description Overwrite an existing module when in different 
 * context, such as inside another module
 *
 * @param $modules - The module(s) which you wish to overwrite
 * @param $is - Overwrite if moulde is certain modifier
 * @param $not - Overwrite if module is not certain modifier
 * @param $type - 'static' | 'chain' | 'flex
 * @param $special - 'adjacent-sibling' | 'general-sibling'
 */

//  Usage
//
//  @include module(header) {
//      @include overwrite(logo) {
//          ...
//      }
//  }
//
//  <div class="header">
//      <div class="logo">...</div>
//  </div>

@mixin overwrite($modules: map-get($config, name), $type: $type, $is: null, $not: null, $special: null) {
    $selectors: ();
    @if $is {
        $type: 'chain';
    }
    @each $module in $modules {
        $selector: #{$module};
        @if $type == 'flex' or $type == 'static' {
            @if $special == 'adjacent-sibling' {
                $selectors: join($selectors, '+ .#{$selector}', comma);
            } @else if $special == 'general-sibling' {
                $selectors: join($selectors, '~ .#{$selector}', comma);
            } @else {
                $selectors: join($selectors, '.#{$selector}', comma);
            }
        }
        @if $type == 'flex' or $type == 'chain' {
            @if $special == 'adjacent-sibling' {
                $selectors: join($selectors, '+ [class*="#{$selector}-"]', comma);
            } @else if $special == 'general-sibling' {
                $selectors: join($selectors, '~ [class*="#{$selector}-"]', comma);
            }  @else {
                $selectors: join($selectors, '[class*="#{$selector}-"]', comma);
            }
        }
        @if $is {
            $modifiers-list: ();
            @each $modifier in $is {
                $selectors: join(
                    $modifiers-list, 
                    selector-append($selectors,'[class*="-#{$modifier}"]'), 
                comma);
            }
        }
        @if $not {
            $modifiers-list: ();
            @each $modifier in $not {
                $selectors: join(
                    $modifiers-list, 
                    selector-append($selectors,':not([class*="-#{$modifier}"])'), 
                comma);
            }
        }
    }
    @if $special == 'at-root' {
        @at-root #{$selectors} {
            @content;
        }
    } @else {
        #{$selectors} {
            @content;
        }
    }
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin overwrite-component
 *
 * @description Overwrite an existing component when in different 
 * context, such as inside another module or component
 *
 * @param $components - The component(s) which you wish to overwrite
 * @param $is - Overwrite if moulde is certain modifier
 * @param $not - Overwrite if module is not certain modifier
 * @param $parent - The parent module of the component
 * @param $special - 'adjacent-sibling' |
 */

//  Usage
// 
//  @include module(form) {
//
//      @include component(input) {
//          ...
//      }
//
//      @include modifier(html5) {
//          @include overwrite-component(input) {
//              ...
//          }
//      }
//
//  }
//
//  <div class="form-html5">
//      <input class="form_input" type="text" />
//  </div>

@mixin overwrite-component($components, $parent: null, $is: null, $not: null, $special: null) {
    $module: if($parent != null, $parent, $module);
    $selectors: ();
    @each $component in $components {
        $selector: #{$module}_#{$component};
        @if $special == 'adjacent-sibling' {
            $selectors: join($selectors, '+ [class*="#{$selector}"]', comma);
        } @else {
            $selectors: join($selectors, '[class*="#{$selector}"]', comma);
        }
        @if $is {
            $modifiers-list: ();
            @each $modifier in $is {
                $selectors: join(
                    $modifiers-list, 
                    selector-append($selectors,'[class*="-#{$modifier}"]'), 
                comma);
            }
        }
        @if $not {
            $modifiers-list: ();
            @each $modifier in $not {
                $selectors: join(
                    $modifiers-list, 
                    selector-append($selectors,':not([class*="-#{$modifier}"])'), 
                comma);
            }
        }
    }
    #{$selectors} {
        @content;
    }
}

// Alias for multiple components
@mixin overwrite-components($components, $type: $type) {
    @include overwrite-component($components, $type) {
        @content;
    }
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin extend
 *
 * @description Extend one or more modifiers of a module to create
 * a new modifier combining the ones you pass
 *
 * @param $modifiers - The modifiers which you wish to combine
 * @param $parent    - The parent module if not current one
 * @param $core      - Extend the core '.module' styles?
 */

//  Usage
//
//  @include module(button) {
//
//      @include modifier(round)   {...}
//      @include modifier(large)   {...}
//      @include modifier(success) {...}
//
//      @include modifier(primary) {
//          @include extend((round, large, success));
//      }	
//
//  }
//
//  <div class="button-primary">...</div>

@mixin extend($modifiers: null, $parent: null, $core: false) {
    @if $core {
        @extend .#{$parent}
    }
    @each $modifier in $modifiers {
        @if type-of($modifier) == string {
            $selector: if(
                $parent, $parent, $module
            );
            @extend [class*="#{$selector}-"][class*="-#{$modifier}"];
        } @else if type-of($modifier) == list {
            $selectors: if(
                $parent,
                ('[class*="#{$parent}-"]'),
                ('[class*="#{$module}-"]')
            );
            @each $item in $modifier {
                $selectors: join($selectors, '[class*="-#{$item}"]', comma);
            }
            @extend #{$selectors};
        }
    }
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin context
 *
 * @description Apply styles to a component when certain conditions
 * are met
 *
 * @param $context - The context you wish to use
 */

@mixin context($context) {
    $child-selectors: &;
    $selectors: ();
    @each $item in $context {
        @if map-get($config, 'selector-type') == 'flex' or map-get($config, 'selector-type') == 'static' {
            $selectors: join($selectors, '.#{$module}', comma);
        }
        @if map-get($config, 'selector-type') == 'flex' or map-get($config, 'selector-type') == 'chain' {
            $selectors: join($selectors, '[class*="#{$module}-"]', comma);
        }
    }
    @if $context == 'parent-hovered' {
        @at-root {
            #{$selectors} {
                &:hover {
                    #{$child-selectors} {
                        @content;
                    }
                }
            }
        }
    }
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin option
 *
 * @description Apply styles to a module if a defined option 
 * returns true
 *
 * @param $option - The option which you wish to test against
 */

//  Usage
//
//  @mixin billboard($custom: ()) {
//
//      $billboard: config((
//          full-screen : false
//      ), $custom);
//
//      @include module(billboard) {
//          @include option(full-screen) {
//              ...
//          }
//      }
//
//  }
//
//  @include billboard: ((
//      full-screen : true
//  ));

@mixin option($option) {
    $option: $option !global;
    $enabled: if(
        (type-of(map-get($config, $option)) == bool and map-get($config, $option) != false) or
        (type-of(map-get($config, $option)) == map and map-get(map-get($config, $option), 'enabled') != false),
        true, false
    );
    @if $enabled {
        @include extend($option);
    }
    @include modifier($option) {	
        @content;
    }
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin value
 *
 * @description Apply styles when a defined option is a particular
 * value
 *
 * @param $setting - The setting/option you are targetting
 * @param $value   - The value you wish to apply styles to
 */

//  Usage
//
//  @mixin header($custom: ()) {
//
//      $header: config((
//          side : false
//      ), $custom);
//
//      @include module(header) {
//          @include option(side) {
//              @include value(left) {
//                  ...
//              }
//          }
//      }
//
//  }
//
//  @include header: ((
//      side : left
//  ));

@mixin value($setting: 'enabled', $value: true) {
    $nested-modifier: if(
        $setting == 'enabled', $value, $setting
    );
    @if (option($config, $option, $setting) == $value) {	
        @if $setting == 'enabled' {
            @include extend($value);
        } @else {
            @include extend($setting);
        }
    }
    @include modifier($nested-modifier) {	
        @content;
    }
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @function config
 *
 * @description Used to merge a module's default configuration with
 * any custom values passed to the module
 *
 * @param $map-old - The map which will store default configuration
 * @param $map-new - The map which will hold custom values
 */

@function config($map-old, $map-new) {

    $map-old: map-merge((
        'selector-type'   : $type,
        'extend-settings' : $extend-options,
        'output-JSON'     : $output-JSON
    ), $map-old);

    $map-old: map-merge-deep($map-old, $map-new);

    // Store merged map in a variable
    $config: $map-old !global;

    // Output options to JSON
    @if option($map-old, 'output-JSON') {
        $config-JSON: map-merge-deep(
            (map-get($map-old, 'name') : ($map-old)), 
            $config-JSON
        ) !global;
    }

    // Return merged map
    @return $map-old;

}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @function map-set
 * @author Sam Richard
 *
 * @param $map
 * @param $key
 * @param $value
 */

@function map-set($map, $key, $value) {
    @return map-merge($map, ($key: $value));
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @function map-set-deep
 * @author Sam Richard
 *
 * @param $map
 * @param $keys
 * @param $value
 */

@function map-set-deep($map, $keys, $value) {

    $private-sassy-maps-suppress-warnings: true !global;
    $length: length($keys);
    $get-keys: ();
    $map-level: ();

    @if $length > 1 {
        $get-keys: get-keys($keys, $length);
        $map-level: map-get-deep($map, $get-keys);
    }

    $merge: (nth($keys, $length): $value);
        
    @if $map-level {
        $merge: map-merge($map-level, $merge);
    }

    @for $i from ($length * -1 + 1) through -1 {
        $j: abs($i);
        $key: nth($keys, $j);
        // @debug $get-keys;
        @if $j > 1 {
            $get-keys: get-keys($keys, $j);
            $map-level: map-get-deep($map, $get-keys);
            @if $map-level {
                $merge: map-merge($map-level, ($key: $merge));
            }
            @else {
                $merge: ($key: $merge);
            }
        }
        @else {
            $merge: ($key: $merge);
        }
    }

    $map: map-merge($map, $merge);
    $private-sassy-maps-suppress-warnings: false !global;

    @return $map;

}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @function map-merge-deep
 * @author Pedr Browne
 *
 * @description Used to recursively merge (deep merge) two maps
 *
 * @param $map-old - The map which will store default configuration
 * @param $map-new - The map which will hold custom values
 * @param $overwrite - The map which will hold custom values
 */

@function map-merge-deep($map-old, $map-new, $overwrite: true) {

    // Iterate through each value of the new map
    @each $key, $new-value in $map-new {
        // Check if that value already exists on the old map
        @if map-has-key($map-old, $key) {
            // There is an existing key
            $old-value: map-get($map-old, $key);
            @if type-of($new-value) == map and type-of($old-value) == map {
                // If both are maps, recurse regardless of $overwrite
                $merged-value: map-merge-deep($old-value, $new-value);
                $map-old: map-set($map-old, $key, $merged-value);	
            } @else {
                // Otherwise check $overwrite
                @if $overwrite{
                    $map-old: map-set($map-old, $key, $new-value);
                }
            }
        } @else {
            // There is no existing key to add
            $map-old: map-set($map-old, $key, $new-value);
        }
    }

    @return $map-old;

}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @function option
 *
 * @description Alias function to map-deep-get()
 *
 * @param $map
 * @param $keys
 */

// @TODO Why doesn't this work? :(
//
// @function option($map, $keys...) {
//     @return map-deep-get($map, $keys...);
// }

@function option($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @function option
 *
 * @description Alias function to option()
 *
 * @param $map
 * @param $keys
 */

@function setting($map, $keys...) {
    @return option($map, $keys...);
}
/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @function this
 * @description Get a value from the current module's configuration
 * @param $options
 */

@function this($options...) {
    @return option($config, $options...)
}