/// Returns a list of keys to to pass into the map-set-deep() function
///
/// @author Sam Richard
/// @access public
/// @link https://git.io/vPrlJ
///
/// @param $keys
/// @param $counter
@function get-keys($keys, $counter) {
    $return: ();

    @for $i from 1 to $counter {
        $return: append($return, nth($keys, $i));
    }

    @return $return;
}
/// Determine if a passed color is grayscale
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {color} $color - the color to test for grayscaleness
/// @param {string} $string [''] - string to provide additional/alternative scoping
/// @param {string} $namespace ['grey] - the namespace to search $string for
///
/// @return {bool} - whether or not the passed color is grayscale
@function is-grayscale($color: '', $string: '', $namespace: 'grey') {
    @if (type-of($color) == 'color' and grayscale($color) == $color) or (str-index($string, $namespace)) {
        @return true;
    } @else {
        @return false;
    }
}
/// Remove duplicate values from a list
///
/// @author Hugo Giraudel
/// @access public
/// @link https://goo.gl/ZWDbZo
///
/// @param {list} $list - the list which you want to remove duplicates from
/// @param {bool} $recursive [false] - used if the target list is nested
///
/// @return {list} - updated list
@function list-remove-duplicates($list, $recursive: false) {
    $result: ();

    @each $item in $list {
        @if not index($result, $item) {
            @if length($item) > 1 and $recursive {
                $result: append($result, remove-duplicates($item, $recursive), comma);
            } @else {
                $result: append($result, $item, comma);
            }
        }
    }

    @return $result;
}
/// Remove a value from a list
///
/// @author Hugo Giraudel
/// @access public
/// @link https://goo.gl/LFRwQf
///
/// @param {list} $list - the list which contains the value you wish to remove
/// @param {*} value - the value you wish to remove
/// @param {bool} $recursive [false] - used if the target list is nested
///
/// @return {list} - updated list
@function list-remove($list, $value, $recursive: false) {
    $result: ();

    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
            $result: append($result, list-remove(nth($list, $i), $value, $recursive), comma);
        } @else if nth($list, $i) != $value {
            $result: append($result, nth($list, $i), comma);
        }
    }

    @return $result;
}
/// Replace a value in a list
///
/// @author Hugo Giraudel
/// @access public
/// @link https://goo.gl/NCFTHF
///
/// @param {list} $list - the list which contains the value you wish to replace
/// @param {*} $old-value - the value you wish to replace
/// @param {*} $new-value - what you wish to replace the old value with
/// @param {bool} $recursive [false] - used if the target list is nested
///
/// @return {list} - updated list
@function list-replace($list, $old-value, $new-value, $recursive: false) {
    $result: ();

    @for $i from 1 through length($list) {
        @if type-of(nth($list, $i)) == list and $recursive {
            $result: append($result, list-replace(nth($list, $i), $old-value, $new-value, $recursive));
        } @else {
            @if nth($list, $i) == $old-value {
                $result: append($result, $new-value);
            } @else {
                $result: append($result, nth($list, $i));
            }
        }
    }

    @return $result;
}
/// Reverse a list
///
/// @author Hugo Giraudel
/// @access public
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
///
/// @param {list }$list - the list which you wish to reverse
/// @param {bool} $recursive [false] - enable if target list has nested values
///
/// @return {list} - reversed list
@function list-reverse($list, $recursive: false) {
    $result: ();

    @for $i from length($list) * -1 through -1 {
        @if type-of(nth($list, abs($i))) == list and $recursive {
            $result: append($result, list-reverse(nth($list, abs($i)), $recursive));
        } @else {
            $result: append($result, nth($list, abs($i)));
        }
    }

    @return $result;
}
/// Get a value from a nested map
///
/// @author Hugo Giraudel
/// @access public
/// @link https://www.sitepoint.com/extra-map-functions-sass/
///
/// @param {map} $map - map
/// @param {arglist} $keys - key chain
///
/// @return {*} - desired value
@function map-get-deep($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}
/// Used to recursively merge (deep merge) two maps
///
/// @author Pedr Browne
/// @access public
/// @link https://git.io/vPrlX
///
/// @param {map} $map-old - The original map
/// @param {map} $map-new - The new map you wish to merge into the original
/// @param {bool} $overwrite [true] - Overwrite existing keys
///
/// @return {map} - merged map
@function map-merge-deep($map-old, $map-new, $overwrite: true) {

    // Iterate through each value of the new map
    @each $key, $new-value in $map-new {

        // Check if that value already exists on the old map
        @if map-has-key($map-old, $key) {
            // There is an existing key
            $old-value: map-get($map-old, $key);
            @if type-of($new-value) == map and type-of($old-value) == map {
                // If both are maps, recurse regardless of $overwrite
                $merged-value: map-merge-deep($old-value, $new-value);
                $map-old: map-set($map-old, $key, $merged-value);
            } @else {
                // Otherwise check $overwrite
                @if $overwrite {
                    $map-old: map-set($map-old, $key, $new-value);
                }
            }
        } @else {
            // There is no existing key to add
            $map-old: map-set($map-old, $key, $new-value);
        }

    }

    @return $map-old;
}
/// Reverse a map
///
/// @author Sean McEmerson
/// @access public
/// @link http://git.io/vLfuz
///
/// @param {map} $map - the map to be reversed
///
/// @return {map} - reversed map
@function map-reverse($map) {
    $keys: map-keys($map);
    $map-reversed: ();

    @for $i from length($keys) through 1 {
        $map-reversed: map-merge(
            $map-reversed, (nth($keys, $i): map-get($map, nth($keys, $i)))
        );
    }

    $result: $map-reversed;

    @return $result;
}
/// Get the value of a unique key from a nested map
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {map} $map - the map which contains the target key
/// @param {string} $target-key - the key of interest
/// @param {*} $target-value - optional fallback value if key not found
///
/// @return {*} - desired value
@function map-search($map, $target-key, $target-value: '') {
    @each $key, $value in $map {
        // Is this our key?
        @if $key == $target-key {
            $target-value: $value;
        } @else {
            @if type-of($value) == 'map' {
                // Does the new map contain our key?
                @if map-has-key($value, $target-key) {
                    $target-value: map-get($value, $target-key);
                } @else {
                    // if not, recurse the function
                    $target-value: map-search($value, $target-key, $target-value);
                }
            }
        }
    }
    @return $target-value;
}
/// Set a nested key in an existing map
///
/// @author Sam Richard
/// @access public
/// @link https://git.io/vPr80
///
/// @param {map} $map - the map which contains the key you wish to set
/// @param {string|list} $keys - the keychain trail to your desired key
/// @param {*} $value - the value you wish to set for the key
///
/// @return {map} - updated map
@function map-set-deep($map, $keys, $value) {

    $private-sassy-maps-suppress-warnings: true !global;
    $length: length($keys);
    $get-keys: ();
    $map-level: ();

    @if $length > 1 {
        $get-keys: get-keys($keys, $length);
        $map-level: map-get-deep($map, $get-keys);
    }

    $merge: (nth($keys, $length): $value);

    @if $map-level {
        $merge: map-merge($map-level, $merge);
    }

    @for $i from ($length * -1 + 1) through -1 {
        $j: abs($i);
        $key: nth($keys, $j);
        @if $j > 1 {
            $get-keys: get-keys($keys, $j);
            $map-level: map-get-deep($map, $get-keys);
            @if $map-level {
                $merge: map-merge($map-level, ($key: $merge));
            } @else {
                $merge: ($key: $merge);
            }
        } @else {
            $merge: ($key: $merge);
        }
    }

    $map: map-merge($map, $merge);
    $private-sassy-maps-suppress-warnings: false !global;

    @return $map;
}
/// Set a key in an existing map
///
/// @author Sam Richard
/// @access public
/// @link https://git.io/vPr8B
///
/// @param {map} $map - the map which contains the key you wish to set
/// @param {string} $key - the key you wish to set
/// @param {*} $value - the value you wish to set for the key
///
/// @return {map} - updated map
@function map-set($map, $key, $value) {
    @return map-merge($map, ($key: $value));
}
/// Multiply one number by the power of another
///
/// @author Hugo Giraudel
/// @access public
/// @link https://css-tricks.com/snippets/sass/power-function/
///
/// @param {number} $number - the number you wish to multiply
/// @param {number} $exponent - the power by which to multiply
///
/// @return {number} - result of $number ^ $exponent
@function pow($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    } @else if $exponent < 0 {
        @for $i from 1 through -$exponent {
            $value: $value / $number;
        }
    }

    @return $value;
}
/// Replace `$search` with `$replace` in `$string`
///
/// @author Hugo Giraudel
/// @access public
/// @link https://css-tricks.com/snippets/sass/str-replace-function/
///
/// @param {string} $string - initial string
/// @param {string} $search - substring to replace
/// @param {string} $replace - new value
///
/// @return {string} - updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(
            str-slice($string, $index + str-length($search)), $search, $replace
        );
    }

    @return $string;
}
/// Remove the units from a value
///
/// @author Hugo Giraudel
/// @access public
/// @link https://css-tricks.com/snippets/sass/strip-unit-function/
///
/// @param {number} $value - number to remove unit from
///
/// @return {number} - Unitless number
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}
// Set the default selector type (flex | chain | static)
$selector-type: 'flex' !default;

// Set the glue to chain modifiers to modules
$modifier-glue: '-' !default;

// Set the glue to chain components to modules
$component-glue: '_' !default;

// Extend each module option as a modifier by default?
$extend-options: true !default;

// Include a mixin by importing the file
$include-now: false !default;

// The variable to hold a single module (do not edit)
$module: null !default;
/// Used to merge a module's default configuration with any custom
/// values passed to the module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {map} $map-old - The map which will store default configuration
/// @param {map} $map-new - The map which will hold custom values
@function config($map-old, $map-new) {

    $map-old: map-merge((
        'selector-type'  : $selector-type,
        'extend-options' : $extend-options
    ), $map-old);

    $map-old: map-merge-deep($map-old, $map-new);

    // Store merged map in a variable
    $config: $map-old !global;

    // Return merged map
    @return $map-old;

}
$css-properties: (
    'accelerator',
    '-wap-accesskey',
    'align-content',
    '-webkit-align-content',
    'align-items',
    '-webkit-align-items',
    'align-self',
    '-webkit-align-self',
    'alignment-baseline',
    'all',
    'alt',
    '-webkit-alt',
    'animation',
    'animation-delay',
    '-moz-animation-delay',
    '-ms-animation-delay',
    '-webkit-animation-delay',
    'animation-direction',
    '-moz-animation-direction',
    '-ms-animation-direction',
    '-webkit-animation-direction',
    'animation-duration',
    '-moz-animation-duration',
    '-ms-animation-duration',
    '-webkit-animation-duration',
    'animation-fill-mode',
    '-moz-animation-fill-mode',
    '-ms-animation-fill-mode',
    '-webkit-animation-fill-mode',
    'animation-iteration-count',
    '-moz-animation-iteration-count',
    '-ms-animation-iteration-count',
    '-webkit-animation-iteration-count',
    '-moz-animation',
    '-ms-animation',
    'animation-name',
    '-moz-animation-name',
    '-ms-animation-name',
    '-webkit-animation-name',
    'animation-play-state',
    '-moz-animation-play-state',
    '-ms-animation-play-state',
    '-webkit-animation-play-state',
    'animation-timing-function',
    '-moz-animation-timing-function',
    '-ms-animation-timing-function',
    '-webkit-animation-timing-function',
    '-webkit-animation',
    '-webkit-app-region',
    'appearance',
    '-moz-appearance',
    '-webkit-appearance',
    '-webkit-aspect-ratio',
    'audio-level',
    'azimuth',
    'backdrop-filter',
    '-webkit-backdrop-filter',
    'backface-visibility',
    '-moz-backface-visibility',
    '-ms-backface-visibility',
    '-webkit-backface-visibility',
    'background',
    'background-attachment',
    '-webkit-background-attachment',
    'background-blend-mode',
    'background-clip',
    '-moz-background-clip',
    '-webkit-background-clip',
    'background-color',
    '-webkit-background-color',
    '-webkit-background-composite',
    'background-image',
    'background-image-transform',
    '-webkit-background-image',
    '-moz-background-inline-policy',
    'background-origin',
    '-moz-background-origin',
    '-webkit-background-origin',
    'background-position',
    '-webkit-background-position',
    'background-position-x',
    '-webkit-background-position-x',
    'background-position-y',
    '-webkit-background-position-y',
    'background-repeat',
    '-webkit-background-repeat',
    'background-repeat-x',
    'background-repeat-y',
    'background-size',
    '-moz-background-size',
    '-webkit-background-size',
    '-webkit-background',
    'baseline-shift',
    'behavior',
    '-moz-binding',
    '-ms-block-progression',
    'block-size',
    'block-step',
    'block-step-align',
    'block-step-insert',
    'block-step-round',
    'block-step-size',
    'bookmark-label',
    'bookmark-level',
    'bookmark-state',
    'border',
    '-webkit-border-after-color',
    '-webkit-border-after-style',
    '-webkit-border-after',
    '-webkit-border-after-width',
    '-webkit-border-before-color',
    '-webkit-border-before-style',
    '-webkit-border-before',
    '-webkit-border-before-width',
    'border-block',
    'border-block-color',
    'border-block-end',
    'border-block-end-color',
    'border-block-end-style',
    'border-block-end-width',
    'border-block-start',
    'border-block-start-color',
    'border-block-start-style',
    'border-block-start-width',
    'border-block-style',
    'border-block-width',
    'border-bottom',
    'border-bottom-color',
    '-moz-border-bottom-colors',
    'border-bottom-left-radius',
    '-webkit-border-bottom-left-radius',
    'border-bottom-right-radius',
    '-webkit-border-bottom-right-radius',
    'border-bottom-style',
    'border-bottom-width',
    'border-boundary',
    'border-collapse',
    'border-color',
    '-moz-border-end-color',
    '-webkit-border-end-color',
    '-moz-border-end',
    '-moz-border-end-style',
    '-webkit-border-end-style',
    '-webkit-border-end',
    '-moz-border-end-width',
    '-webkit-border-end-width',
    '-webkit-border-fit',
    '-webkit-border-horizontal-spacing',
    'border-image',
    '-moz-border-image',
    '-o-border-image',
    'border-image-outset',
    '-webkit-border-image-outset',
    'border-image-repeat',
    '-webkit-border-image-repeat',
    'border-image-slice',
    '-webkit-border-image-slice',
    'border-image-source',
    '-webkit-border-image-source',
    'border-image-transform',
    '-webkit-border-image',
    'border-image-width',
    '-webkit-border-image-width',
    'border-inline',
    'border-inline-color',
    'border-inline-end',
    'border-inline-end-color',
    'border-inline-end-style',
    'border-inline-end-width',
    'border-inline-start',
    'border-inline-start-color',
    'border-inline-start-style',
    'border-inline-start-width',
    'border-inline-style',
    'border-inline-width',
    'border-left',
    'border-left-color',
    '-moz-border-left-colors',
    'border-left-style',
    'border-left-width',
    'border-radius',
    '-moz-border-radius-bottomleft',
    '-moz-border-radius-bottomright',
    '-moz-border-radius',
    '-moz-border-radius-topleft',
    '-moz-border-radius-topright',
    '-webkit-border-radius',
    'border-right',
    'border-right-color',
    '-moz-border-right-colors',
    'border-right-style',
    'border-right-width',
    'border-spacing',
    '-moz-border-start-color',
    '-webkit-border-start-color',
    '-moz-border-start',
    '-moz-border-start-style',
    '-webkit-border-start-style',
    '-webkit-border-start',
    '-moz-border-start-width',
    '-webkit-border-start-width',
    'border-style',
    'border-top',
    'border-top-color',
    '-moz-border-top-colors',
    'border-top-left-radius',
    '-webkit-border-top-left-radius',
    'border-top-right-radius',
    '-webkit-border-top-right-radius',
    'border-top-style',
    'border-top-width',
    '-webkit-border-vertical-spacing',
    'border-width',
    'bottom',
    '-moz-box-align',
    '-webkit-box-align',
    'box-decoration-break',
    '-webkit-box-decoration-break',
    '-moz-box-direction',
    '-webkit-box-direction',
    '-webkit-box-flex-group',
    '-moz-box-flex',
    '-webkit-box-flex',
    '-webkit-box-lines',
    '-moz-box-ordinal-group',
    '-webkit-box-ordinal-group',
    '-moz-box-orient',
    '-webkit-box-orient',
    '-moz-box-pack',
    '-webkit-box-pack',
    '-webkit-box-reflect',
    'box-shadow',
    '-moz-box-shadow',
    '-webkit-box-shadow',
    'box-sizing',
    '-moz-box-sizing',
    '-webkit-box-sizing',
    'box-snap',
    'break-after',
    'break-before',
    'break-inside',
    'buffered-rendering',
    'caption-side',
    'caret',
    'caret-animation',
    'caret-color',
    'caret-shape',
    'chains',
    'clear',
    'clip',
    'clip-path',
    '-webkit-clip-path',
    'clip-rule',
    'color',
    'color-adjust',
    '-webkit-color-correction',
    'color-interpolation',
    'color-interpolation-filters',
    'color-profile',
    'color-rendering',
    '-webkit-column-axis',
    '-webkit-column-break-after',
    '-webkit-column-break-before',
    '-webkit-column-break-inside',
    'column-count',
    '-moz-column-count',
    '-webkit-column-count',
    'column-fill',
    '-moz-column-fill',
    '-webkit-column-fill',
    'column-gap',
    '-moz-column-gap',
    '-webkit-column-gap',
    'column-progression',
    '-webkit-column-progression',
    'column-rule',
    'column-rule-color',
    '-moz-column-rule-color',
    '-webkit-column-rule-color',
    '-moz-column-rule',
    'column-rule-style',
    '-moz-column-rule-style',
    '-webkit-column-rule-style',
    '-webkit-column-rule',
    'column-rule-width',
    '-moz-column-rule-width',
    '-webkit-column-rule-width',
    'column-span',
    '-webkit-column-span',
    'column-width',
    '-moz-column-width',
    '-webkit-column-width',
    'columns',
    '-moz-columns',
    '-webkit-columns',
    '-webkit-composition-fill-color',
    '-webkit-composition-frame-color',
    'contain',
    'content',
    '-ms-content-zoom-chaining',
    '-ms-content-zoom-limit-max',
    '-ms-content-zoom-limit-min',
    '-ms-content-zoom-limit',
    '-ms-content-zoom-snap',
    '-ms-content-zoom-snap-points',
    '-ms-content-zoom-snap-type',
    '-ms-content-zooming',
    'continue',
    'counter-increment',
    'counter-reset',
    'counter-set',
    'cue',
    'cue-after',
    'cue-before',
    'cursor',
    '-webkit-cursor-visibility',
    'cx',
    'cy',
    'd',
    '-apple-dashboard-region',
    '-webkit-dashboard-region',
    'direction',
    'display',
    'display-align',
    'dominant-baseline',
    'elevation',
    'empty-cells',
    'enable-background',
    'fill',
    'fill-break',
    'fill-color',
    'fill-image',
    'fill-opacity',
    'fill-origin',
    'fill-position',
    'fill-repeat',
    'fill-rule',
    'fill-size',
    'filter',
    '-ms-filter',
    '-webkit-filter',
    'flex',
    '-ms-flex-align',
    '-webkit-flex-align',
    'flex-basis',
    '-webkit-flex-basis',
    'flex-direction',
    '-ms-flex-direction',
    '-webkit-flex-direction',
    'flex-flow',
    '-ms-flex-flow',
    '-webkit-flex-flow',
    'flex-grow',
    '-webkit-flex-grow',
    '-ms-flex-item-align',
    '-webkit-flex-item-align',
    '-ms-flex-line-pack',
    '-webkit-flex-line-pack',
    '-ms-flex',
    '-ms-flex-negative',
    '-ms-flex-order',
    '-webkit-flex-order',
    '-ms-flex-pack',
    '-webkit-flex-pack',
    '-ms-flex-positive',
    '-ms-flex-preferred-size',
    'flex-shrink',
    '-webkit-flex-shrink',
    '-webkit-flex',
    'flex-wrap',
    '-ms-flex-wrap',
    '-webkit-flex-wrap',
    'float',
    'float-defer',
    '-moz-float-edge',
    'float-offset',
    'float-reference',
    'flood-color',
    'flood-opacity',
    'flow',
    'flow-from',
    '-ms-flow-from',
    '-webkit-flow-from',
    'flow-into',
    '-ms-flow-into',
    '-webkit-flow-into',
    'font',
    'font-display',
    'font-family',
    'font-feature-settings',
    '-moz-font-feature-settings',
    '-ms-font-feature-settings',
    '-webkit-font-feature-settings',
    'font-kerning',
    '-webkit-font-kerning',
    'font-language-override',
    '-moz-font-language-override',
    'font-max-size',
    'font-min-size',
    'font-optical-sizing',
    'font-palette',
    'font-presentation',
    'font-size',
    'font-size-adjust',
    '-webkit-font-size-delta',
    '-webkit-font-smoothing',
    'font-stretch',
    'font-style',
    'font-synthesis',
    'font-variant',
    'font-variant-alternates',
    'font-variant-caps',
    'font-variant-east-asian',
    'font-variant-ligatures',
    '-webkit-font-variant-ligatures',
    'font-variant-numeric',
    'font-variant-position',
    'font-variation-settings',
    'font-weight',
    'footnote-display',
    'footnote-policy',
    '-moz-force-broken-image-icon',
    'glyph-orientation-horizontal',
    'glyph-orientation-vertical',
    'grid',
    '-webkit-grid-after',
    'grid-area',
    'grid-auto-columns',
    '-webkit-grid-auto-columns',
    'grid-auto-flow',
    '-webkit-grid-auto-flow',
    'grid-auto-rows',
    '-webkit-grid-auto-rows',
    '-webkit-grid-before',
    'grid-column',
    '-ms-grid-column-align',
    'grid-column-end',
    'grid-column-gap',
    '-ms-grid-column',
    '-ms-grid-column-span',
    'grid-column-start',
    '-webkit-grid-column',
    '-ms-grid-columns',
    '-webkit-grid-columns',
    '-webkit-grid-end',
    'grid-gap',
    'grid-row',
    '-ms-grid-row-align',
    'grid-row-end',
    'grid-row-gap',
    '-ms-grid-row',
    '-ms-grid-row-span',
    'grid-row-start',
    '-webkit-grid-row',
    '-ms-grid-rows',
    '-webkit-grid-rows',
    '-webkit-grid-start',
    'grid-template',
    'grid-template-areas',
    'grid-template-columns',
    'grid-template-rows',
    'hanging-punctuation',
    'height',
    '-ms-high-contrast-adjust',
    '-webkit-highlight',
    'hyphenate-character',
    '-webkit-hyphenate-character',
    '-webkit-hyphenate-limit-after',
    '-webkit-hyphenate-limit-before',
    'hyphenate-limit-chars',
    '-ms-hyphenate-limit-chars',
    'hyphenate-limit-last',
    'hyphenate-limit-lines',
    '-ms-hyphenate-limit-lines',
    '-webkit-hyphenate-limit-lines',
    'hyphenate-limit-zone',
    '-ms-hyphenate-limit-zone',
    'hyphens',
    '-moz-hyphens',
    '-ms-hyphens',
    '-webkit-hyphens',
    'image-orientation',
    '-moz-image-region',
    'image-rendering',
    'image-resolution',
    '-ms-ime-align',
    'ime-mode',
    'initial-letter',
    'initial-letter-align',
    '-webkit-initial-letter',
    'initial-letter-wrap',
    'inline-size',
    'input-format',
    '-wap-input-format',
    '-wap-input-required',
    'inset',
    'inset-block',
    'inset-block-end',
    'inset-block-start',
    'inset-inline',
    'inset-inline-end',
    'inset-inline-start',
    '-ms-interpolation-mode',
    'isolation',
    'justify-content',
    '-webkit-justify-content',
    'justify-items',
    'justify-self',
    '-webkit-justify-self',
    'kerning',
    'layout-flow',
    'layout-grid',
    'layout-grid-char',
    'layout-grid-line',
    'layout-grid-mode',
    'layout-grid-type',
    'left',
    'letter-spacing',
    'lighting-color',
    '-webkit-line-align',
    '-webkit-line-box-contain',
    'line-break',
    '-webkit-line-break',
    '-webkit-line-clamp',
    'line-grid',
    '-webkit-line-grid-snap',
    '-webkit-line-grid',
    'line-height',
    'line-height-step',
    'line-increment',
    'line-snap',
    '-webkit-line-snap',
    '-o-link',
    '-o-link-source',
    'list-style',
    'list-style-image',
    'list-style-position',
    'list-style-type',
    '-webkit-locale',
    '-webkit-logical-height',
    '-webkit-logical-width',
    'margin',
    '-webkit-margin-after-collapse',
    '-webkit-margin-after',
    '-webkit-margin-before-collapse',
    '-webkit-margin-before',
    'margin-block',
    'margin-block-end',
    'margin-block-start',
    'margin-bottom',
    '-webkit-margin-bottom-collapse',
    '-webkit-margin-collapse',
    '-moz-margin-end',
    '-webkit-margin-end',
    'margin-inline',
    'margin-inline-end',
    'margin-inline-start',
    'margin-left',
    'margin-right',
    '-moz-margin-start',
    '-webkit-margin-start',
    'margin-top',
    '-webkit-margin-top-collapse',
    'marker',
    'marker-end',
    'marker-knockout-left',
    'marker-knockout-right',
    'marker-mid',
    'marker-offset',
    'marker-pattern',
    'marker-segment',
    'marker-side',
    'marker-start',
    'marks',
    '-wap-marquee-dir',
    'marquee-direction',
    '-webkit-marquee-direction',
    '-webkit-marquee-increment',
    'marquee-loop',
    '-wap-marquee-loop',
    '-webkit-marquee-repetition',
    'marquee-speed',
    '-wap-marquee-speed',
    '-webkit-marquee-speed',
    'marquee-style',
    '-wap-marquee-style',
    '-webkit-marquee-style',
    '-webkit-marquee',
    'mask',
    '-webkit-mask-attachment',
    'mask-border',
    'mask-border-mode',
    'mask-border-outset',
    'mask-border-repeat',
    'mask-border-slice',
    'mask-border-source',
    'mask-border-width',
    '-webkit-mask-box-image-outset',
    '-webkit-mask-box-image-repeat',
    '-webkit-mask-box-image-slice',
    '-webkit-mask-box-image-source',
    '-webkit-mask-box-image',
    '-webkit-mask-box-image-width',
    'mask-clip',
    '-webkit-mask-clip',
    'mask-composite',
    '-webkit-mask-composite',
    'mask-image',
    '-webkit-mask-image',
    'mask-mode',
    'mask-origin',
    '-webkit-mask-origin',
    'mask-position',
    '-webkit-mask-position',
    'mask-position-x',
    '-webkit-mask-position-x',
    'mask-position-y',
    '-webkit-mask-position-y',
    'mask-repeat',
    '-webkit-mask-repeat',
    '-webkit-mask-repeat-x',
    '-webkit-mask-repeat-y',
    'mask-size',
    '-webkit-mask-size',
    'mask-source-type',
    '-webkit-mask-source-type',
    'mask-type',
    '-webkit-mask',
    '-webkit-match-nearest-mail-blockquote-color',
    'max-block-size',
    'max-height',
    'max-inline-size',
    'max-lines',
    '-webkit-max-logical-height',
    '-webkit-max-logical-width',
    'max-width',
    'max-zoom',
    'min-block-size',
    'min-height',
    'min-inline-size',
    '-webkit-min-logical-height',
    '-webkit-min-logical-width',
    'min-width',
    'min-zoom',
    'mix-blend-mode',
    'motion',
    'motion-offset',
    'motion-path',
    'motion-rotation',
    'nav-down',
    'nav-index',
    'nav-left',
    'nav-right',
    'nav-up',
    '-webkit-nbsp-mode',
    'object-fit',
    '-o-object-fit',
    'object-position',
    '-o-object-position',
    'offset',
    'offset-after',
    'offset-anchor',
    'offset-before',
    'offset-block-end',
    'offset-block-start',
    'offset-distance',
    'offset-end',
    'offset-inline-end',
    'offset-inline-start',
    'offset-path',
    'offset-position',
    'offset-rotate',
    'offset-rotation',
    'offset-start',
    'opacity',
    '-moz-opacity',
    'order',
    '-webkit-order',
    '-moz-orient',
    'orientation',
    'orphans',
    '-moz-osx-font-smoothing',
    'outline',
    'outline-color',
    '-moz-outline-color',
    '-moz-outline',
    'outline-offset',
    '-moz-outline-offset',
    '-moz-outline-radius-bottomleft',
    '-moz-outline-radius-bottomright',
    '-moz-outline-radius',
    '-moz-outline-radius-topleft',
    '-moz-outline-radius-topright',
    'outline-style',
    '-moz-outline-style',
    'outline-width',
    '-moz-outline-width',
    'overflow',
    'overflow-anchor',
    '-webkit-overflow-scrolling',
    'overflow-style',
    '-ms-overflow-style',
    'overflow-wrap',
    'overflow-x',
    'overflow-y',
    'padding',
    '-webkit-padding-after',
    '-webkit-padding-before',
    'padding-block',
    'padding-block-end',
    'padding-block-start',
    'padding-bottom',
    '-moz-padding-end',
    '-webkit-padding-end',
    'padding-inline',
    'padding-inline-end',
    'padding-inline-start',
    'padding-left',
    'padding-right',
    '-moz-padding-start',
    '-webkit-padding-start',
    'padding-top',
    'page',
    'page-break-after',
    'page-break-before',
    'page-break-inside',
    'paint-order',
    'pause',
    'pause-after',
    'pause-before',
    'perspective',
    '-moz-perspective',
    '-ms-perspective',
    'perspective-origin',
    '-moz-perspective-origin',
    '-ms-perspective-origin',
    '-webkit-perspective-origin',
    'perspective-origin-x',
    '-webkit-perspective-origin-x',
    'perspective-origin-y',
    '-webkit-perspective-origin-y',
    '-webkit-perspective',
    'pitch',
    'pitch-range',
    'place-content',
    'place-items',
    'place-self',
    'play-during',
    'pointer-events',
    'position',
    '-webkit-print-color-adjust',
    'quotes',
    'r',
    '-webkit-region-break-after',
    '-webkit-region-break-before',
    '-webkit-region-break-inside',
    'region-fragment',
    '-webkit-region-fragment',
    '-webkit-region-overflow',
    'resize',
    'rest',
    'rest-after',
    'rest-before',
    'richness',
    'right',
    'rotate',
    'rotation',
    'rotation-point',
    '-webkit-rtl-ordering',
    'ruby-align',
    'ruby-merge',
    'ruby-overhang',
    'ruby-position',
    '-webkit-ruby-position',
    'running',
    'rx',
    'ry',
    'scale',
    'scroll-behavior',
    '-ms-scroll-chaining',
    '-ms-scroll-limit',
    '-ms-scroll-limit-x-max',
    '-ms-scroll-limit-x-min',
    '-ms-scroll-limit-y-max',
    '-ms-scroll-limit-y-min',
    'scroll-padding',
    'scroll-padding-block',
    'scroll-padding-block-end',
    'scroll-padding-block-start',
    'scroll-padding-bottom',
    'scroll-padding-inline',
    'scroll-padding-inline-end',
    'scroll-padding-inline-start',
    'scroll-padding-left',
    'scroll-padding-right',
    'scroll-padding-top',
    '-ms-scroll-rails',
    'scroll-snap-align',
    'scroll-snap-coordinate',
    '-webkit-scroll-snap-coordinate',
    'scroll-snap-destination',
    '-webkit-scroll-snap-destination',
    'scroll-snap-margin',
    'scroll-snap-margin-block',
    'scroll-snap-margin-block-end',
    'scroll-snap-margin-block-start',
    'scroll-snap-margin-bottom',
    'scroll-snap-margin-inline',
    'scroll-snap-margin-inline-end',
    'scroll-snap-margin-inline-start',
    'scroll-snap-margin-left',
    'scroll-snap-margin-right',
    'scroll-snap-margin-top',
    'scroll-snap-points-x',
    '-ms-scroll-snap-points-x',
    '-webkit-scroll-snap-points-x',
    'scroll-snap-points-y',
    '-ms-scroll-snap-points-y',
    '-webkit-scroll-snap-points-y',
    'scroll-snap-stop',
    'scroll-snap-type',
    '-ms-scroll-snap-type',
    '-webkit-scroll-snap-type',
    'scroll-snap-type-x',
    'scroll-snap-type-y',
    '-ms-scroll-snap-x',
    '-ms-scroll-snap-y',
    '-ms-scroll-translation',
    'scrollbar-arrow-color',
    'scrollbar-base-color',
    'scrollbar-dark-shadow-color',
    'scrollbar-darkshadow-color',
    'scrollbar-face-color',
    'scrollbar-gutter',
    'scrollbar-highlight-color',
    'scrollbar-shadow-color',
    'scrollbar-track-color',
    'scrollbar3d-light-color',
    'scrollbar3dlight-color',
    'shape-image-threshold',
    '-webkit-shape-image-threshold',
    'shape-inside',
    '-webkit-shape-inside',
    'shape-margin',
    '-webkit-shape-margin',
    'shape-outside',
    '-webkit-shape-outside',
    '-webkit-shape-padding',
    'shape-rendering',
    'size',
    'snap-height',
    'solid-color',
    'solid-opacity',
    'speak',
    'speak-as',
    'speak-header',
    'speak-numeral',
    'speak-punctuation',
    'speech-rate',
    'src',
    '-moz-stack-sizing',
    'stop-color',
    'stop-opacity',
    'stress',
    'string-set',
    'stroke',
    'stroke-align',
    'stroke-alignment',
    'stroke-break',
    'stroke-color',
    'stroke-dash-corner',
    'stroke-dash-justify',
    'stroke-dashadjust',
    'stroke-dasharray',
    'stroke-dashcorner',
    'stroke-dashoffset',
    'stroke-image',
    'stroke-linecap',
    'stroke-linejoin',
    'stroke-miterlimit',
    'stroke-opacity',
    'stroke-origin',
    'stroke-position',
    'stroke-repeat',
    'stroke-size',
    'stroke-width',
    '-webkit-svg-shadow',
    'tab-size',
    '-moz-tab-size',
    '-o-tab-size',
    '-o-table-baseline',
    'table-layout',
    '-webkit-tap-highlight-color',
    'text-align',
    'text-align-all',
    'text-align-last',
    '-moz-text-align-last',
    'text-anchor',
    'text-autospace',
    '-moz-text-blink',
    '-ms-text-combine-horizontal',
    'text-combine-upright',
    '-webkit-text-combine',
    'text-decoration',
    'text-decoration-blink',
    'text-decoration-color',
    '-moz-text-decoration-color',
    '-webkit-text-decoration-color',
    'text-decoration-line',
    '-moz-text-decoration-line',
    'text-decoration-line-through',
    '-webkit-text-decoration-line',
    'text-decoration-none',
    'text-decoration-overline',
    'text-decoration-skip',
    '-webkit-text-decoration-skip',
    'text-decoration-style',
    '-moz-text-decoration-style',
    '-webkit-text-decoration-style',
    'text-decoration-underline',
    '-webkit-text-decoration',
    '-webkit-text-decorations-in-effect',
    'text-emphasis',
    'text-emphasis-color',
    '-webkit-text-emphasis-color',
    'text-emphasis-position',
    '-webkit-text-emphasis-position',
    'text-emphasis-style',
    '-webkit-text-emphasis-style',
    '-webkit-text-emphasis',
    '-webkit-text-fill-color',
    'text-indent',
    'text-justify',
    'text-justify-trim',
    'text-kashida',
    'text-kashida-space',
    'text-line-through',
    'text-line-through-color',
    'text-line-through-mode',
    'text-line-through-style',
    'text-line-through-width',
    'text-orientation',
    '-webkit-text-orientation',
    'text-overflow',
    'text-overline',
    'text-overline-color',
    'text-overline-mode',
    'text-overline-style',
    'text-overline-width',
    'text-rendering',
    '-webkit-text-security',
    'text-shadow',
    'text-size-adjust',
    '-moz-text-size-adjust',
    '-ms-text-size-adjust',
    '-webkit-text-size-adjust',
    'text-space-collapse',
    'text-space-trim',
    'text-spacing',
    '-webkit-text-stroke-color',
    '-webkit-text-stroke',
    '-webkit-text-stroke-width',
    'text-transform',
    'text-underline',
    'text-underline-color',
    'text-underline-mode',
    'text-underline-position',
    '-webkit-text-underline-position',
    'text-underline-style',
    'text-underline-width',
    'text-wrap',
    '-webkit-text-zoom',
    'top',
    'touch-action',
    'touch-action-delay',
    '-ms-touch-action',
    '-webkit-touch-callout',
    '-ms-touch-select',
    'transform',
    'transform-box',
    '-moz-transform',
    '-ms-transform',
    '-o-transform',
    'transform-origin',
    '-moz-transform-origin',
    '-ms-transform-origin',
    '-o-transform-origin',
    '-webkit-transform-origin',
    'transform-origin-x',
    '-webkit-transform-origin-x',
    'transform-origin-y',
    '-webkit-transform-origin-y',
    'transform-origin-z',
    '-webkit-transform-origin-z',
    'transform-style',
    '-moz-transform-style',
    '-ms-transform-style',
    '-webkit-transform-style',
    '-webkit-transform',
    'transition',
    'transition-delay',
    '-moz-transition-delay',
    '-ms-transition-delay',
    '-o-transition-delay',
    '-webkit-transition-delay',
    'transition-duration',
    '-moz-transition-duration',
    '-ms-transition-duration',
    '-o-transition-duration',
    '-webkit-transition-duration',
    '-moz-transition',
    '-ms-transition',
    '-o-transition',
    'transition-property',
    '-moz-transition-property',
    '-ms-transition-property',
    '-o-transition-property',
    '-webkit-transition-property',
    'transition-timing-function',
    '-moz-transition-timing-function',
    '-ms-transition-timing-function',
    '-o-transition-timing-function',
    '-webkit-transition-timing-function',
    '-webkit-transition',
    'translate',
    'uc-alt-skin',
    'uc-skin',
    'unicode-bidi',
    'unicode-range',
    '-webkit-user-drag',
    '-moz-user-focus',
    '-moz-user-input',
    '-moz-user-modify',
    '-webkit-user-modify',
    'user-select',
    '-moz-user-select',
    '-ms-user-select',
    '-webkit-user-select',
    'user-zoom',
    'vector-effect',
    'vertical-align',
    'viewport-fill',
    'viewport-fill-opacity',
    'visibility',
    'voice-balance',
    'voice-duration',
    'voice-family',
    'voice-pitch',
    'voice-range',
    'voice-rate',
    'voice-stress',
    'voice-volume',
    'volume',
    'white-space',
    '-webkit-widget-region',
    'widows',
    'width',
    'will-change',
    '-moz-window-dragging',
    '-moz-window-shadow',
    'word-break',
    'word-spacing',
    'word-wrap',
    'wrap-after',
    'wrap-before',
    'wrap-flow',
    '-ms-wrap-flow',
    '-webkit-wrap-flow',
    'wrap-inside',
    '-ms-wrap-margin',
    '-webkit-wrap-margin',
    '-webkit-wrap-padding',
    '-webkit-wrap-shape-inside',
    '-webkit-wrap-shape-outside',
    'wrap-through',
    '-ms-wrap-through',
    '-webkit-wrap-through',
    '-webkit-wrap',
    'writing-mode',
    '-webkit-writing-mode',
    'x',
    'y',
    'z-index',
    'zoom'
) !default;
/// Used to fetch custom module configuration from a global config
/// file
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string} $module - The module for which to find configuration
@function custom($module) {
    @return if(variable-exists('app') and map-get($app, $module), map-get($app, $module), ())
}
/// Return a CSS property if the passed option is enabled
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $option - the desired option
/// @returns {*} - $true-value if option enabled, otherwise returns $false-value
@function enabled($option, $true-value, $false-value: '') {
    $breadcrumb: ();
    @each $crumb in $option {
        $breadcrumb: join($breadcrumb, $crumb, comma);
    }
    @if value-enabled(map-get-deep($config, $breadcrumb...)) {
        @return $true-value;
    } @else {
        @return $false-value;
    }
}
/// Create a namespace tree from a passed selector
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {list} $selectors - The selector from which to create the module tree
@function module-tree($selector) {
    $parent-module: $module;

    // Remove any modifers
    $selectors: remove-modifiers($selector);

    // Remove any junk characters
    $selectors: str-replace($selectors, '.', '');
    $selectors: str-replace($selectors, '[class*="#{$modifier-glue}', '');
    $selectors: str-replace($selectors, '[class*="', '');
    $selectors: str-replace($selectors, '#{$modifier-glue}"]', '');
    $selectors: str-replace($selectors, '"]', '');

    // Spoof our modules into a list
    $selectors: str-replace($selectors, ' ', ', ');
    $selectors: selector-parse($selectors);

    @return $selectors;
}
/// Return the value of a module's option
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @alias map-get-deep
///
/// @example
///     option($blockquote, 'icon', 'left')
@function option($args...) {
    @return map-get-deep($args...);
}
/// Remove components from a selector
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {list} $selectors - The selector from which to remove components
///
/// @todo potential need to recurse?
@function remove-components($selector) {
    // convert selector to a string
    $selector: inspect(nth($selector, 1));

    $component: '';

    // Find out where the first component starts
    $component-index: str-index($selector, '#{$component-glue}');

    @if $component-index {
        // Strip the first part of the selector up until the first component
        $component: str-slice($selector, $component-index);

        // Find out where the component potentially ends
        $component-end-1: str-index($component, ' ');
        // Find out where the component potentially ends
        $component-end-2: str-index($component, '#{$modifier-glue}"]');
        // Find out where the component actually ends
        $component-end: '';
        @if $component-end-1 and $component-end-2 {
            $component-end: min($component-end-1, $component-end-2);
        } @else if $component-end-1 and not $component-end-2 {
            $component-end: $component-end-1;
        } @else if not $component-end-1 and $component-end-2 {
            $component-end: $component-end-2;
        }

        // Isolate the component
        $component: str-slice($component, 0, $component-end);
        // Remove the component from the selector
        $selector: str-replace($selector, $component, '');
    }

    @return $selector;
}
/// Remove modifiers from a selector
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {list} $selectors - The selector from which to remove modifiers
@function remove-modifiers($selector) {
    // convert selector to a string
    $selector: inspect(nth($selector, 1));

    $modifier: '';

    // Find out where the first modifier starts
    $modifier-index: str-index($selector, '"#{$modifier-glue}');

    @if $modifier-index {
        // Strip the first part of the selector up until the first modifier
        $modifier: str-slice($selector, $modifier-index);
        // Find out where the modifier ends
        $modifier-end: str-index($modifier, '"]');
        // Isolate the modifier
        $modifier: str-slice($modifier, 0, $modifier-end);
        // Remove the modifier from the selector
        $selector: str-replace($selector, $modifier, '');
        // Remove junk characters
        $selector: str-replace($selector, '[class*=]', '');
        // Recurse the function to eliminate any remainig modifiers
        $selector: remove-modifiers($selector);
    }

    @return $selector;
}
/// Alias function to option()
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {map} $map
/// @param {arglist} $keys
@function setting($map, $keys...) {
    @return option($map, $keys...);
}
/// Get a value from the current module's configuration
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {arglist} $options
@function this($options...) {
    @if not option($config, $options...) {
        @warn '#{$options} not found in #{$module} config';
    }

    @return option($config, $options...);
}
/// Determine if a passed value should be considered 'enabled'
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {*} $value - the value to check
/// @returns {*} - whether or not the option is enabled
@function value-enabled($value) {
    // If the value is a map
    @if type-of($value) == 'map' {
        // Does the map contain the 'enabled' key?
        @if map-has-key($value, 'enabled') {
            @return map-get($value, 'enabled');
        } @else {
            @return $value;
        }
    }
    // If the value is a list
    @else if type-of($value) == 'list' {
        // Is the first value a bool?
        @if type-of(nth($value, 1)) == 'bool' {
            @return nth($value, 1);
        } @else {
            @return $value;
        }
    } @else {
        @return $value;
    }
}
/// Create a new module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modules - The module(s) you wish to create
/// @param {string} $type - Determine module type
///
/// @example
///     @include module('header') {
///         ...
///     }
///
///     <div class="header">...</div>
@mixin module(
    $modules: if(variable-exists('config'), (map-get($config, 'name')), ''),
    $type: if(variable-exists('config'), (map-get($config, 'selector-type')), $selector-type)
) {

    // disable any output
    $disable-output: if(
        variable-exists('disable-output'), variable-exists('disable-output'), false
    );
    @if variable-exists('config') and map-has-key($config, 'disable-output') {
        $disable-output: map-get($config, 'disable-output');
    }

    $nested: &;

    @if not $nested {
        // We are creating a root module, so create a global variable
        $module: $modules !global;
    }

    $selectors: ();

    @each $module in $modules {
        @if $type == 'flex' or $type == 'static' {
            $selectors: join($selectors, '.#{$module}', comma);
        }
        @if $type == 'flex' or $type == 'chain' {
            $selectors: join($selectors, '[class*="#{$module}#{$modifier-glue}"]', comma);
        }
        @if $type == 'data' {
            $selectors: join($selectors, '[data-#{$module}]', comma);
        }
    }

    $target: false;

    @if variable-exists('config') and map-has-key($config, 'target') {
        $target: map-get($config, 'target');
    }

    @if not $disable-output {
        #{$selectors} {
            @content;
            @if not $nested {
                @include extend-modifiers;
                @include combine-modifiers;
                //@debug $modules != map-get($config, 'name'), $modules, map-get($config, 'name');
                @if $modules == map-get($config, 'name') {
                    @if $target {
                        #{$target} {
                            @include module-css($config);
                        }
                    } @else {
                        @include module-css($config);
                    }
                }
            }
        }
    }

}

/// Alias for module() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modules - The module(s) you wish to create
/// @param {string} $type - Determine module type
@mixin modules($modules, $type: $selector-type) {
    @include module($modules, $type) {
        @content;
    }
}

/// Combine modifiers into a new, single modifier
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $styles - The CSS styles to output
@mixin combine-modifiers($combine: if(variable-exists('config'), (map-get($config, 'combine')), '()')) {
    @if variable-exists('config') and $combine {
        @each $new-modifier, $target-modifiers in $combine {
            @include modifier($new-modifier) {
                @include extend(($target-modifiers));
            }
        }
    }
}

/// Extend modifiers into the naked module
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $styles - The CSS styles to output
@mixin extend-modifiers($modifiers: if(variable-exists('config'), (map-get($config, 'modifiers')), '()')) {
    @if variable-exists('config') and $modifiers {
        @include extend(($modifiers));
    }
}

/// Output CSS styles from config
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $config - The confing to find and output CSS from
@mixin module-css($config) {

    @each $property, $value in $config {

        // the propery is for a modifier
        @if str-slice($property, 1, 1) == $modifier-glue {
            @include modifier(str-replace($property, $modifier-glue, '')) {
                @include module-css($value);
            }
        }

        // the property is for a component
        @else if str-slice($property, 1, 1) == $component-glue {
            @include component(str-replace($property, $component-glue, '')) {
                @include module-css($value);
            }
        }

        // the property is for hovered states
        @else if $property == 'hover' {
            &:hover {
                @include module-css($value);
            }
        }

        // the property is for active states
        @else if $property == 'active' {
            @include modifier('active') {
                @include module-css($value);
            }
        }

        // the property is regular CSS
        @else if index($css-properties, $property) {
            @if type-of($value) != 'map' {
                #{$property}: $value;
            }
        }

    }

}
/// Create a component based off the main module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $components - The component or components to be used
///
/// @example
///
///     @include module('header') {
///         @include component('wrapper') {
///             ...
///         }
///     }
///
///     <div class="header_wrapper">...</div>
@mixin component($components: null, $glue: $component-glue) {

    $selectors: '[class*="#{$module}#{$glue}"]';

    $namespace: nth(module-tree(&), length(module-tree(&)));

    @if $components {

        $selectors: ();

        @each $component in $components {
            $selectors: join($selectors, '.#{$namespace}#{$glue}#{$component}, [class*="#{$namespace}#{$glue}#{$component}-"]', comma);
        }

    }

    // Generate the parent selectors

    $parents: ();

    @each $selector in & {

        // spoof the selector into a list
        $selector: str-replace(inspect($selector), ' ', ', ');
        $selector: selector-parse($selector);

        // if the last item isn't a modifier, remove it
        @if not str-index(inspect(nth($selector, length($selector))), '[class*="#{$modifier-glue}') {
            $selector: list-remove($selector, nth($selector, length($selector)));
        }

        // convert the selector back into a string
        @if length($selector) == 1 {
            $selector: nth($selector, 1);
        }
        $selector: str-replace(inspect($selector), ', ', ' ');

        // Re-build the parent selector
        $parents: append($parents, $selector, comma);
    }

    // remove duplicate selectors
    $parents: list-remove-duplicates($parents);

    @if length($parents) == 1 {
        $parents: nth($parents, 1);
    }

    @if ($parents == '()') {
        @at-root #{$selectors} {
            @content;
            @include component-css($components, $config);
        }
    } @else {
        @at-root #{$parents} {
            #{$selectors} {
                @content;
                // @TODO confirm if below needed
                // @include component-css($components, $config);
            }
        }
    }

}

/// Alias for component() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $components - The component(s) you wish to create
@mixin components($components) {
    @include component($components) {
        @content;
    }
}

/// Output CSS styles from config
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $config - The confing to find and output CSS from
@mixin component-css($components, $config) {
    @each $component in $components {

        @if map-has-key($config, $component) and type-of(map-get($config, $component)) == 'map' {
            @each $property, $value in map-get($config, $component) {

                @if index($css-properties, $property) {
                    #{$property}: $value;
                }
                @else if $property == 'hover' {
                    &:hover {
                        @include component-css($property, map-get($config, $component));
                    }
                }
                @else if $property == 'active' {
                    @include modifier('active') {
                        @include component-css($property, map-get($config, $component));
                    }
                }
                @else {
                    @include component($property) {
                        @include component-css($property, map-get($config, $component));
                    }
                }

            }
        }

    }
}
/// Create a modifier for a module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modifiers  - The modifier(s) which you wish to create
/// @param {string} $special [null] - Add special contextual options to modifier
/// @param {bool} $glue ['-'] - Desired modifier separator/glue
///
/// @example
///     @include module('button') {
///         @include modifier('large') {
///             ...
///         }
///     }
///
///     <div class="button-large">...</div>
@mixin modifier($modifiers, $special: null, $glue: $modifier-glue) {

    $selectors: &;

    @if str-index(inspect(&), '.#{$module}') {
        @if (variable-exists('config') and map-get($config, 'selector-type') == 'flex')
        or (not variable-exists('config') and $selector-type == 'flex') {
            $selectors: ();
            @for $i from 1 through length(&) {
                @if $i % 2 == 0 {
                    $selectors: append($selectors, nth(&, $i), comma);
                }
            }
        }
    }

    @at-root #{$selectors} {

        $modifier-selectors: ();

        @each $modifier in $modifiers {
            @if $special == 'not' {
                $modifier-selectors: join($modifier-selectors, '&:not([class*="#{$glue}#{$modifier}"])', comma);
            } @else {
                $modifier-selectors: join($modifier-selectors, '&[class*="#{$glue}#{$modifier}"]', comma);
            }
        }

        #{$modifier-selectors} {
            @content;
        }

    }

} // modifier()

/// Alias for modifier() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modifiers - The modifier(s) you wish to create
@mixin modifiers($modifiers) {
    @include modifier($modifiers) {
        @content;
    }
}
/// Extend one or more modifiers of a module to create a new modifier
/// combining the ones you pass
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modifiers [null] - The modifiers which you wish to combine
/// @param {string} $parent [null] - The parent module if not current one
/// @param {bool} $core [false] - Extend the core '.module' styles?
///
/// @example
///
///     @include module(button) {
///
///         @include modifier('round')   {...}
///         @include modifier('large')   {...}
///         @include modifier('success') {...}
///
///         @include modifier('primary') {
///             @include extend(('round', 'large', 'success'));
///         }
///
///     }
///
///     <div class="button-primary">...</div>
@mixin extend($modifiers: null, $parent: null, $core: false) {

    @if $core or not $modifiers {
        @extend .#{$parent};
    }

    @each $modifier in $modifiers {
        @if type-of($modifier) == 'string' {

            $selector: if($parent, $parent, $module);

            @extend [class*="#{$selector}#{$modifier-glue}"][class*="#{$modifier-glue}#{$modifier}"];
        }
        @else if type-of($modifier) == 'list' {

            $selectors: if(
                $parent, ('[class*="#{$parent}#{$modifier-glue}"]'), ('[class*="#{$module}#{$modifier-glue}"]')
            );

            @each $item in $modifier {
                $selectors: join($selectors, '[class*="#{$modifier-glue}#{$item}"]', comma);
            }

            @extend #{$selectors};
        }
    }

}

// Alias for extending entire modules
@mixin _module($module, $modifiers: null, $core: true) {
    @include extend($parent: $module, $modifiers: $modifiers, $core: $core);
}
/// Apply styles to a component when certain conditions are met
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string} $context - The context you wish to use
@mixin context($context) {
    $child-selectors: &;
    $selectors: ();
    @each $item in $context {
        @if map-get($config, 'selector-type') == 'flex' or map-get($config, 'selector-type') == 'static' {
            $selectors: join($selectors, '.#{$module}', comma);
        }
        @if map-get($config, 'selector-type') == 'flex' or map-get($config, 'selector-type') == 'chain' {
            $selectors: join($selectors, '[class*="#{$module}#{$modifier-glue}"]', comma);
        }
    }
    @if $context == 'parent-hovered' {
        @at-root {
            #{$selectors} {
                &:hover {
                    #{$child-selectors} {
                        @content;
                    }
                }
            }
        }
    }
}
/// Apply styles to a module if a passed option returns true
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string} $option - The option which you wish to test against
///
/// @example
///     @mixin billboard($custom: ()) {
///
///         $billboard: config((
///             fullscreen : false
///         ), $custom);
///
///         @include module('billboard') {
///             @include option('fullscreen') {
///                 ...
///             }
///         }
///
///     }
///
///     @include billboard: ((
///         fullscreen : true
///     ));
@mixin option($option-path...) {

    $value  : map-get-deep($config, $option-path...);
    $option : nth($option-path, length($option-path)) !global;

    // Create a unique, random placeholder to store styles
    $placeholder : $option + random(9999);

    // Store the styles in the placeholder
    @at-root %#{$placeholder} {
        @content;
    }

    // Output the styles if the option is enabled
    @if value-enabled($value) {
        @extend %#{$placeholder};
    }

    // Create a modifier for the option if it is not enabled
    // by default
    @if $extend-options and not value-enabled($value) {
        @include modifier($option) {
            @extend %#{$placeholder};
        }
    }

}
/// Apply styles when a defined option is a particular value
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param $setting - The setting/option you are targetting
/// @param $value - The value you wish to apply styles to
///
/// @example
///
///     @mixin header($custom: ()) {
///
///         $header: config((
///             side : false
///         ), $custom);
///
///         @include module(header) {
///             @include option(side) {
///                 @include value(left) {
///                     ...
///                 }
///             }
///         }
///
///     }
///
///     @include header: ((
///         side : left
///     ));
@mixin value($value) {

    // Create a unique, random placeholder to store styles
    $placeholder : $value + random(9999);

    $target: if(
        type-of(option($config, $option)) == 'map',
        option($config, $option, 'enabled'),
        option($config, $option)
    );

    // Determine if the option's value is our value of interest
    $enabled: if(
        $target == $value, true, false
    );

    @at-root {

        // Store the styles in the placeholder
        %#{$placeholder} {
            @content;
        }

        @include module($module) {

            // Output the styles if the option is enabled
            @if ($enabled) {
                @extend %#{$placeholder};
            }

            // Create a modifier for the option
            @include modifier($option) {
                @include modifier($value) {
                    @extend %#{$placeholder};
                }
            }

        }

    }

}