/// Overwrite an existing component when in different context, such as
/// inside another module or component
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $components - The component(s) which you wish to overwrite
/// @param {string|list} $is - Overwrite if moulde is certain modifier
/// @param {string|list} $not - Overwrite if module is not certain modifier
/// @param {string} $parent - The parent module of the component
/// @param {string} $special - Pass a special contextual option
///
/// @example
///     @include module('form') {
///
///         @include component('input') {
///             ...
///         }
///
///         @include modifier('html5') {
///             @include overwrite-component('input') {
///                 ...
///             }
///         }
///
///     }
///
///     <div class="form-html5">
///         <input class="form_input" type="text" />
///     </div>
@mixin overwrite-component($components, $parent: null, $is: null, $not: null, $special: null) {

    $module: if($parent != null, $parent, $module);
    $selectors: ();

    @each $component in $components {
        $selector: #{$module}#{$component-glue}#{$component};
        @if $special == 'adjacent-sibling' {
            $selectors: join($selectors, '+ [class*="#{$selector}"]', comma);
        } @else {
            $selectors: join($selectors, '[class*="#{$selector}"]', comma);
        }
        @if $is {
            $modifiers-list: ();
            @each $modifier in $is {
                $selectors: join(
                    $modifiers-list,
                    selector-append($selectors, '[class*="#{$modifier-glue}#{$modifier}"]'),
                comma);
            }
        }
        @if $not {
            $modifiers-list: ();
            @each $modifier in $not {
                $selectors: join(
                    $modifiers-list,
                    selector-append($selectors, ':not([class*="#{$modifier-glue}#{$modifier}"])'),
                comma);
            }
        }
    }

    #{$selectors} {
        @content;
    }

}

/// Alias for overwrite-component() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {arglist} $args - The arguments you wish to pass
@mixin overwrite-components($args...) {
    @include overwrite-component($args...) {
        @content;
    }
}