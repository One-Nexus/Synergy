/// Create a new module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modules - The module(s) you wish to create
/// @param {string} $type - Determine module type
///
/// @example
///     @include module('header') {
///         ...
///     }
///
///     <div class="header">...</div>
@mixin module(
    $modules: if(variable-exists('config'), (map-get($config, 'name')), ''),
    $type: if(variable-exists('config'), (map-get($config, 'selector-type')), $selector-type)
) {

    @if ($module-namespace) {
        $modules: $module-namespace + $modules;
    }

    // disable any output
    $disable-output: if(
        variable-exists('disable-output'), $disable-output, false
    );
    @if variable-exists('config') and map-has-key($config, 'disable-output') {
        $disable-output: map-get($config, 'disable-output');
    }

    $nested: &;

    @if not $nested {
        // We are creating a root module, so create a global variable
        $module: $modules !global;
    }

    $selectors: ();

    @each $module in $modules {
        @if $type == 'flex' or $type == 'static' {
            $selectors: join($selectors, '.#{$module}', comma);
        }
        @if $type == 'flex' or $type == 'chain' {
            $selectors: join($selectors, '[class*="#{$module}#{$modifier-glue}"]', comma);
        }
        @if $type == 'data' {
            $selectors: join($selectors, '[data-#{$module}]', comma);
        }
    }

    $target: false;

    @if variable-exists('config') and map-has-key($config, 'target') {
        $target: map-get($config, 'target');
    }

    @if not $disable-output {
        #{$selectors} {
            @content;
            @if not $nested {
                @include extend-modifiers;
                @include combine-modifiers;

                @if variable-exists('config') {
                    @if $modules == map-get($config, 'name') or $target {
                        @if $target {
                            #{$target} {
                                @include module-css($config);
                            }
                        } @else {
                            @include module-css($config);
                        }
                    }
                }
            }
        }
    }

}

/// Alias for module() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modules - The module(s) you wish to create
/// @param {string} $type - Determine module type
@mixin modules($modules, $type: $selector-type) {
    @include module($modules, $type) {
        @content;
    }
}

/// Combine modifiers into a new, single modifier
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $styles - The CSS styles to output
@mixin combine-modifiers($combine: if(variable-exists('config'), (map-get($config, 'combine')), '()')) {
    @if variable-exists('config') and $combine {
        @each $new-modifier, $target-modifiers in $combine {
            @include modifier($new-modifier) {
                @include extend(($target-modifiers));
            }
        }
    }
}

/// Extend modifiers into the naked module
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $styles - The CSS styles to output
@mixin extend-modifiers($modifiers: if(variable-exists('config'), (map-get($config, 'modifiers')), '()')) {
    @if variable-exists('config') and $modifiers {
        @include extend(($modifiers));
    }
}

/// Output CSS styles from config
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $config - The confing to find and output CSS from
@mixin module-css($config) {

    @each $property, $value in $config {

        // the propery is for a modifier
        @if str-slice($property, 1, 1) == $modifier-glue {
            @include modifier(strip-glue($property, $modifier-glue)) {
                @include module-css($value);
            }
        }

        // the property is for a component
        @else if str-slice($property, 1, 1) == $component-glue {
            @include component(strip-glue($property, $component-glue)) {
                @include module-css($value);
            }
        }

        // the property is for hovered states
        @else if $property == 'hover' {
            &:hover {
                @include module-css($value);
            }
        }

        // the property is for active states
        @else if $property == 'active' {
            @include modifier('active') {
                @include module-css($value);
            }
        }

        // the property is regular CSS
        @else if index($css-properties, $property) {
            @if type-of($value) != 'map' {
                #{$property}: $value;
            }
        }

    }

}