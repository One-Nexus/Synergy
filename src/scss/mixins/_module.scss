/// Create a new module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modules - The module(s) you wish to create
/// @param {string} $type - Determine module type
///
/// @example
///     @include module('header') {
///         ...
///     }
///
///     <div class="header">...</div>
@mixin module(
    $modules: if(variable-exists('config'), (map-get($config, 'name')), ''),
    $type: if(variable-exists('config'), (map-get($config, 'selector-type')), $selector-type)
) {

    @if not & {
        // We are creating a root module, so creare a global variable
        $module: $modules !global;
    }

    $selectors: ();

    @each $module in $modules {
        @if $type == 'flex' or $type == 'static' {
            $selectors: join($selectors, '.#{$module}', comma);
        }
        @if $type == 'flex' or $type == 'chain' {
            $selectors: join($selectors, '[class*="#{$module}#{$modifier-glue}"]', comma);
        }
        @if $type == 'data' {
            $selectors: join($selectors, '[data-#{$module}]', comma);
        }
    }

    #{$selectors} {
        @content;
        @include extend-modifiers;
        @include combine-modifiers;
        @include module-css;
    }

}

/// Alias for module() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modules - The module(s) you wish to create
/// @param {string} $type - Determine module type
@mixin modules($modules, $type: $selector-type) {
    @include module($modules, $type) {
        @content;
    }
}

/// Combine modifiers into a new, single modifier
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $styles - The CSS styles to output
@mixin combine-modifiers($combine: if(variable-exists('config'), (map-get($config, 'combine')), '()')) {
    @if variable-exists('config') and $combine {
        @each $new-modifier, $target-modifiers in $combine {
            @include modifier($new-modifier) {
                @include extend(($target-modifiers));
            }
        }
    }
}

/// Extend modifiers into the naked module
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $styles - The CSS styles to output
@mixin extend-modifiers($modifiers: if(variable-exists('config'), (map-get($config, 'modifiers')), '()')) {
    @if variable-exists('config') and $modifiers {
        @include extend(($modifiers));
    }
}

/// Output CSS styles from config
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $styles - The CSS styles to output
@mixin module-css($styles: if(variable-exists('config'), (map-get($config, 'CSS')), '()')) {
    @if variable-exists('config') and $styles {
        @each $property, $value in $styles {
            // the propery is for a modifier
            @if str-slice($property, 1, 1) == $modifier-glue {
                @include modifier(str-replace($property, $modifier-glue, '')) {
                    @include module-css($value);
                }
            } 
            // the property is for a component
            @else if str-slice($property, 1, 1) == $component-glue {
                @include component(str-replace($property, $component-glue, '')) {
                    @include module-css($value);
                }
            }
            // the property is regular CSS
            @else {
                #{$property}: $value;
            }
        }
    }
}

/// Create a module tree
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {list} $selectors - The selector from which to create the module tree
@function module-tree($selector) {
    $parent-module: $module;

    // Remove any modifers
    $selectors: remove-modifiers($selector);

    // Remove any junk characters
    $selectors: str-replace($selectors, '.', '');
    $selectors: str-replace($selectors, '[class*="', '');
    $selectors: str-replace($selectors, '"]', '');
    $selectors: str-replace($selectors, '#{$modifier-glue}', '');

    // Spoof our modules into a list
    $selectors: str-replace($selectors, ' ', ', ');
    $selectors: selector-parse($selectors);

    @return $selectors;
}

/// Remove modifiers from a selector
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {list} $selectors - The selector from which to remove modifiers
@function remove-modifiers($selector) {
    // convert selector to a string
    $selector: inspect(nth($selector, 1));

    $modifier: '';

    // Find out where the first modifier starts
    $modifier-index: str-index($selector, '"#{$modifier-glue}');

    @if $modifier-index {
        // Strip the first part of the selector up until the first modifier
        $modifier: str-slice($selector, $modifier-index);
        // Find out where the modifier ends
        $modifier-end: str-index($modifier, '"]');
        // Isolate the modifier
        $modifier: str-slice($modifier, 0, $modifier-end);
        // Remove the modifier from the selector
        $selector: str-replace($selector, $modifier, '');
        // Remove junk characters
        $selector: str-replace($selector, '[class*=]', '');
        // Recurse the function to eliminate any remainig modifiers
        $selector: remove-modifiers($selector);
    }

    @return $selector;
}

/// Remove components from a selector
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {list} $selectors - The selector from which to remove components
@function remove-components($selector) {
    // convert selector to a string
    $selector: inspect(nth($selector, 1));

    $component: '';

    // Find out where the first component starts
    $component-index: str-index($selector, '#{$component-glue}');

    @if $component-index {
        // Strip the first part of the selector up until the first component
        $component: str-slice($selector, $component-index);

        // Find out where the component potentially ends
        $component-end-1: str-index($component, ' ');
        // Find out where the component potentially ends
        $component-end-2: str-index($component, '#{$modifier-glue}"]');
        // Find out where the component actually ends
        $component-end: '';
        @if $component-end-1 and $component-end-2 {
            $component-end: min($component-end-1, $component-end-2);
        } @else if $component-end-1 and not $component-end-2 {
            $component-end: $component-end-1;
        } @else if not $component-end-1 and $component-end-2 {
            $component-end: $component-end-2;
        }

        // Isolate the component
        $component: str-slice($component, 0, $component-end);
        // Remove the component from the selector
        $selector: str-replace($selector, $component, '');
    }

    @return $selector;
}