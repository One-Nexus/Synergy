/// Create a new module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $modules - The module(s) you wish to create
/// @param {string} $type - Determine module type
///
/// @example
///     @include module('header') {
///         ...
///     }
///
///     <div class="header">...</div>
@mixin module(
    $modules: if(variable-exists('config'), (map-get($config, 'name')), ''),
    $type: if(variable-exists('config'), (map-get($config, 'selector-type')), $selector-type)
) {

    $module: $modules !global;
    $selectors: ();

    @each $module in $modules {
        @if $type == 'flex' or $type == 'static' {
            $selectors: join($selectors, '.#{$module}', comma);
        }
        @if $type == 'flex' or $type == 'chain' {
            $selectors: join($selectors, '[class*="#{$module}#{$modifier-glue}"]', comma);
        }
        @if $type == 'data' {
            $selectors: join($selectors, '[data-#{$module}]', comma);
        }
    }

    #{$selectors} {
        @content;
        @include module-styles;
    }

}

/// Alias for module() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $modules - The module(s) you wish to create
/// @param {string} $type - Determine module type
@mixin modules($modules, $type: $selector-type) {
    @include module($modules, $type) {
        @content;
    }
}

/// Output CSS styles from config
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
///
/// @param {map} $styles - The CSS styles to output
@mixin module-styles($styles: if(variable-exists('config'), (map-get($config, 'CSS')), '()')) {
    @if variable-exists('config') and $styles {
        @each $property, $value in $styles {
            // the propery is for a modifier
            @if str-slice($property, 1, 1) == $modifier-glue {
                @include modifier(str-replace($property, $modifier-glue, '')) {
                    @include module-styles($value);
                }
            } 
            // the property is for a component
            @else if str-slice($property, 1, 1) == $component-glue {
                @include component(str-replace($property, $component-glue, '')) {
                    @include module-styles($value);
                }
            }
            // the property is regular CSS
            @else {
                #{$property}: $value;
            }
        }
    }
}