/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin extend
 *
 * @description Extend one or more modifiers of a module to create
 * a new modifier combining the ones you pass
 *
 * @param $modifiers - The modifiers which you wish to combine
 * @param $parent    - The parent module if not current one
 * @param $core      - Extend the core '.module' styles?
 */

//  Usage
//
//  @include module(button) {
//
//      @include modifier(round)   {...}
//      @include modifier(large)   {...}
//      @include modifier(success) {...}
//
//      @include modifier(primary) {
//          @include extend((round, large, success));
//      }	
//
//  }
//
//  <div class="button-primary">...</div>

@mixin extend($modifiers: null, $parent: null, $core: false) {
    @if $core {
        @extend .#{$parent}
    }
    @each $modifier in $modifiers {
        @if type-of($modifier) == string {
            $selector: if(
                $parent, $parent, $module
            );
            @extend [class*="#{$selector}-"][class*="-#{$modifier}"];
        } @else if type-of($modifier) == list {
            $selectors: if(
                $parent,
                ('[class*="#{$parent}-"]'),
                ('[class*="#{$module}-"]')
            );
            @each $item in $modifier {
                $selectors: join($selectors, '[class*="-#{$item}"]', comma);
            }
            @extend #{$selectors};
        }
    }
}