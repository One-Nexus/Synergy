/// Overwrite an existing module when in different context, such as
/// inside another module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $modules - The module(s) which you wish to overwrite
/// @param {string|list} $is - Overwrite if moulde is certain modifier(s)
/// @param {string|list} $not - Overwrite if module is not certain modifier(s)
/// @param {string} $type - Set what type the module has
/// @param {string} $special - Pass a special contextual option
///
/// @example
///     @include module('header') {
///         @include overwrite('logo') {
///             ...
///         }
///     }
///
///     <div class="header">
///         <div class="logo">...</div>
///     </div>
@mixin overwrite($modules: map-get($config, 'name'), $type: $selector-type, $is: null, $not: null, $special: null) {
    $selectors: ();
    @if $is {
        $type: 'chain';
    }
    @each $module in $modules {
        $selector: #{$module};
        @if $type == 'flex' or $type == 'static' {
            @if $special == 'adjacent-sibling' {
                $selectors: join($selectors, '+ .#{$selector}', comma);
            } @else if $special == 'general-sibling' {
                $selectors: join($selectors, '~ .#{$selector}', comma);
            } @else {
                $selectors: join($selectors, '.#{$selector}', comma);
            }
        }
        @if $type == 'flex' or $type == 'chain' {
            @if $special == 'adjacent-sibling' {
                $selectors: join($selectors, '+ [class*="#{$selector}#{$modifier-glue}"]', comma);
            } @else if $special == 'general-sibling' {
                $selectors: join($selectors, '~ [class*="#{$selector}#{$modifier-glue}"]', comma);
            }  @else {
                $selectors: join($selectors, '[class*="#{$selector}#{$modifier-glue}"]', comma);
            }
        }
        @if $is {
            $modifiers-list: ();
            @each $modifier in $is {
                $selectors: join(
                    $modifiers-list,
                    selector-append($selectors, '[class*="#{$modifier-glue}#{$modifier}"]'),
                comma);
            }
        }
        @if $not {
            $modifiers-list: ();
            @each $modifier in $not {
                $selectors: join(
                    $modifiers-list,
                    selector-append($selectors, ':not([class*="#{$modifier-glue}#{$modifier}"])'),
                comma);
            }
        }
    }
    @if $special == 'at-root' {
        @at-root #{$selectors} {
            @content;
        }
    } @else {
        #{$selectors} {
            @content;
        }
    }
}