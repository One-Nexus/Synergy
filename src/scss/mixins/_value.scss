/// Apply styles when a defined option is a particular value
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param $setting - The setting/option you are targetting
/// @param $value - The value you wish to apply styles to
///
/// @example
///
///     @mixin header($custom: ()) {
///
///         $header: config((
///             side : false
///         ), $custom);
///
///         @include module(header) {
///             @include option(side) {
///                 @include value(left) {
///                     ...
///                 }
///             }
///         }
///
///     }
///
///     @include header: ((
///         side : left
///     ));
@mixin value($value) {

    // Create a unique, random placeholder to store styles
    $placeholder : $value + random(9999);

    $target: if(
        type-of(option($config, $option)) == 'map',
        option($config, $option, 'enabled'),
        option($config, $option)
    );

    // Determine if the option's value is our value of interest
    $enabled: if(
        $target == $value, true, false
    );

    @at-root {

        // Store the styles in the placeholder
        %#{$placeholder} {
            @content;
        }

        @include overwrite($module) {

            // Output the styles if the option is enabled
            @if ($enabled) {
                @extend %#{$placeholder};
            }

            // Create a modifier for the option
            @include modifier($option) {
                @include modifier($value) {
                    @extend %#{$placeholder};
                }
            }

        }

    }

}