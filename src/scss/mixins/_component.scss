/// Create a component based off the main module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $components - The component or components to be used
///
/// @example
///
///     @include module('header') {
///         @include component('wrapper') {
///             ...
///         }
///     }
///
///     <div class="header_wrapper">...</div>
@mixin component($components: null, $glue: $component-glue) {

    $selectors: '[class*="#{$module}#{$glue}"]';

    @if $components {

        // Get target namespace
        $parents: str-replace(inspect(nth(&, 1)), '.', '');
        $parents: str-replace($parents, '[class*="', '');
        $parents: str-replace($parents, '#{$modifier-glue}"]', '');
        $parents: str-replace($parents, '"]', '');

        $selectors: ();

        @each $component in $components {
            // Create the attribute wildcard selectors
            $selectors: if(
                inspect(nth(&, 1)) == '.#{$module}', (
                    join($selectors, '[class*="#{$module}#{$glue}#{$component}"]', comma)
                ), (
                    join($selectors, '[class*="#{$parents}#{$glue}#{$component}"]', comma)
                )
            );
        }

    }

    @at-root {
        #{$selectors} {
            @content;
        }
    }

}

/// Alias for component() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $components - The component(s) you wish to create
@mixin components($components) {
    @include component($components) {
        @content;
    }
}