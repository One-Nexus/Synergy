/// Create a component based off the main module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $components - The component or components to be used
///
/// @example
///
///     @include module('header') {
///         @include component('wrapper') {
///             ...
///         }
///     }
///
///     <div class="header_wrapper">...</div>
@mixin component($components: null, $content: (), $glue: $component-glue) {

    $parents   : ();
    $selectors : '[class*="#{$module}#{$glue}"]';
    $this      : &;
    $tree      : module-tree($this);
    $namespace : nth($tree, length($tree));

    @if $components {
        $selectors: ();

        @each $component in $components {
            $selector: '.#{$namespace}#{$glue}#{$component}, [class*="#{$namespace}#{$glue}#{$component}-"]';
            $selectors: join($selectors, $selector, comma);
        }
    }

    @each $selector in & {
        // spoof the selector into a list
        $selector: str-replace(inspect($selector), ' ', ', ');
        $selector: selector-parse($selector);

        // if the last item isn't a modifier, remove it
        @if not str-index(inspect(nth($selector, length($selector))), '[class*="#{$modifier-glue}') {
            $selector: list-remove($selector, nth($selector, length($selector)));
        }

        @if length($selector) == 1 {
            $selector: nth($selector, 1);
        }

        // convert the selector back into a string
        $selector: str-replace(inspect($selector), ', ', ' ');

        // Re-build the parent selector
        $parents: append($parents, $selector, comma);
    }

    $parents: list-remove-duplicates($parents);

    @if length($parents) == 1 {
        $parents: nth($parents, 1);
        // BEGIN TOMFOOLERY https://github.com/sass/libsass/issues/2520
        $parents: str-replace(inspect($parents), ' ', ', ');
        $parents: selector-parse($parents);
        $parents: list-remove-duplicates($parents);
        $parents: str-replace(inspect($parents), ', ', ' ');
        // END TOMFOOLERY
    }

    @if ($parents == '()') {
        @at-root #{$selectors} {
            @content;

            @each $component in $components {
                $component: if(map-get($config, $component), map-get($config, $component), ());
                $content: merge-css-maps($content, $component);
            }

            @include get-css-from-map($content);
        }
    }
    @else {
        @at-root #{$parents} {
            #{$selectors} {
                @content;

                @each $component in $components {
                    $component: if(map-get($config, $component), map-get($config, $component), ());
                    $content: merge-css-maps($content, $component);
                }

                @include get-css-from-map($content);
            }
        }
    }

}

/// Alias for component() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $components - The component(s) you wish to create
@mixin components($components) {
    @include component($components) {
        @content;
    }
}

/// Output CSS styles from config
///
/// @author [@esr360](http://twitter.com/esr360)
///
/// @param {map} $config - The confing to find and output CSS from
@mixin component-css($components, $config) {
    @each $component in $components {
        @if map-has-key($config, $component) and type-of(map-get($config, $component)) == 'map' {
            @include get-css-from-map(map-get($config, $component));
        }
    }
}