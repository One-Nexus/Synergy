/// Create a component based off the main module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $components - The component or components to be used
///
/// @example
///
///     @include module('header') {
///         @include component('wrapper') {
///             ...
///         }
///     }
///
///     <div class="header_wrapper">...</div>
@mixin component($components: null, $glue: $component-glue) {

    $selectors: '[class*="#{$module}#{$glue}"]';

    $namespace: nth(module-tree(&), length(module-tree(&)));

    @if $components {

        $selectors: ();

        @each $component in $components {
            $selectors: join($selectors, '.#{$namespace}#{$glue}#{$component}, [class*="#{$namespace}#{$glue}#{$component}-"]', comma);
        }

    }

    // Generate the parent selectors

    $parents: ();

    @each $selector in & {

        // spoof the selector into a list
        $selector: str-replace(inspect($selector), ' ', ', ');
        $selector: selector-parse($selector);

        // if the last item isn't a modifier, remove it
        @if not str-index(inspect(nth($selector, length($selector))), '[class*="#{$modifier-glue}') {
            $selector: list-remove($selector, nth($selector, length($selector)));
        }

        // convert the selector back into a string
        @if length($selector) == 1 {
            $selector: nth($selector, 1);
        }
        $selector: str-replace(inspect($selector), ', ', ' ');

        // Re-build the parent selector
        $parents: append($parents, $selector, comma);
    }

    // remove duplicate selectors
    $parents: list-remove-duplicates($parents);

    @if length($parents) == 1 {
        $parents: nth($parents, 1);
    }

    @if ($parents == '()') {
        @at-root #{$selectors} {
            @content;
        }
    } @else {
        @at-root #{$parents} {
            #{$selectors} {
                @content;
            }
        }
    }

}

/// Alias for component() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $components - The component(s) you wish to create
@mixin components($components) {
    @include component($components) {
        @content;
    }
}