/// Create a component based off the main module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $components - The component or components to be used
///
/// @example
///
///     @include module('header') {
///         @include component('wrapper') {
///             ...
///         }
///     }
///
///     <div class="header_wrapper">...</div>
@mixin component($components: null, $glue: $component-glue) {

    $selectors: '[class*="#{$module}#{$glue}"]';

    // Get target namespace
    $parents: isolate-module(&);

    //@debug str-index($parents, $module) == 1;
    //@debug $parents, $module;

    @if str-index($parents, ' ') and str-index($parents, $module) == 1 {
        $parents: str-replace($parents, $module, '');
        $parents: str-replace($parents, ' ', '');
        @if str-index($parents, '#{$modifier-glue}') == str-length($parents) {
            $parents: str-slice($parents, 1, (str-length($parents) - 1));
            @debug str-length($parents), $parents;
        }
    }

    //Get the desired module name for the component
    $module: if(
        $module == $parents,
        $module,
        $parents
    );

    @debug $module;
    // to-string(nth(&, 1)) == '.#{$module}'

    @if $components {

        $selectors: ();

        @each $component in $components {
            $selectors: join(
                $selectors, '.#{$module}#{$glue}#{$component}, [class*="#{$module}#{$glue}#{$component}-"]', 
            comma);
        }

    }

    @at-root #{$selectors} {
        @content;
    }

}

/// Alias for component() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string|list} $components - The component(s) you wish to create
@mixin components($components) {
    @include component($components) {
        @content;
    }
}

// Function to isolate module name
@function isolate-module($string) {
    $string: str-replace(inspect(nth($string, 1)), '.', '');
    $string: str-replace($string, '[class*="', '');
    $string: str-replace($string, '#{$modifier-glue}"]', '');
    $string: str-replace($string, '"]', '');
    $string: unquote(to-string($string));

    @return $string;
}