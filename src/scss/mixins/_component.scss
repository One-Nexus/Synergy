/** 
 * Modular
 * @author Edmund Reed | @esr360
 * 
 * @mixin component
 *
 * @description Create a component based off the main module
 *
 * @param $components - The component or components to be used
 */

//  Usage
//
//  @include module(header) {
//      @include component(wrapper) {
//          ...
//      }
//  }
//
//  <div class="header_wrapper">...</div>

@mixin component($components: null) {
    
    $selectors: '[class*="#{$module}_"]';
    
    @if $components {
        
        // Get target namespace
        $parents: str-replace(inspect(nth(&, 1)), '.', '');
        $parents: str-replace($parents, '[class*="', '');
        $parents: str-replace($parents, '-"]', '');
        $parents: str-replace($parents, '"]', '');
        
        $selectors: ();
            
        @each $component in $components {           
            // Create the naked class selectors   
            $selectors: if(
                nth(&, 1) + unquote('') == '.#{$module}',
                (
                    join($selectors, '.#{$module}_#{$component}', comma)
                ),
                (
                    join($selectors, '.#{$parents}_#{$component}', comma)
                )
            );         
            // Create the attribute wildcard selectors      
            $selectors: if(
                nth(&, 1) + unquote('') == '.#{$module}',
                (
                    join($selectors, '[class*="#{$module}_#{$component}-"]', comma)
                ),
                (
                    join($selectors, '[class*="#{$parents}_#{$component}-"]', comma)
                )
            );
        }
        
    }
    
    @at-root {
        #{$selectors} {
            @content;
        }
    }	

}

// Alias for multiple components
@mixin components($sub-components) {
    @include component($sub-components) {
        @content;
    }
}