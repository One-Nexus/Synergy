/// Create a component based off the main module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $components - The component or components to be used
///
/// @example
///     @include module('header') {
///         @include component('wrapper') {
///             ...
///         }
///     }
@mixin component($components: null, $content: (), $sub-component: false, $glue: $component-glue) {

    $this        : &;
    $selectors   : '[class*="#{$module}#{$glue}"]';
    $namespace   : nth(module-tree(&), length(module-tree(&)));

    @if not $sub-component {
        $namespace: $module;
    }

    @if $components {
        $selectors: ();

        @each $component in $components {
            $selector: '.#{$namespace}#{$glue}#{$component}, [class*="#{$namespace}#{$glue}#{$component}-"]';
            $selectors: join($selectors, $selector, comma);
        }
    }

    $parents: ();

    @each $selector in & {
        // spoof the selector into a list
        $selector: selector-parse(str-replace(inspect($selector), ' ', ', '));

        $is-modifier: str-index(inspect(nth($selector, length($selector))), '[class*="#{$modifier-glue}');
        $is-pseudo-state: str-index(inspect(nth($selector, length($selector))), ':');

        // if the last item isn't a modifier or pseudo state, remove it
        @if not ($is-modifier or $is-pseudo-state) {
            $selector: list-remove($selector, nth($selector, length($selector)));
        }

        @if length($selector) == 1 {
            $selector: nth($selector, 1);
        }

        // Re-build the parent selector
        $parents: append($parents, str-replace(inspect($selector), ', ', ' '), comma);
    }

    $parents: list-remove-duplicates($parents);

    @if length($parents) == 1 {
        $parents: nth($parents, 1);
    }

    @if ($parents == '()') {
        @at-root #{$selectors} {
            @include render-component($this, $components, $content) {
                @content;
            }
        }
    }
    @else {
        @at-root #{$parents} {
            #{$selectors} {
                @include render-component($this, $components, $content) {
                    @content;
                }
            }
        }
    }

    // @TODO - this works with node-sass 4.7.2 but not 4.9.0
    //
    // @at-root #{if($parents == '()', $selectors, $parents)} {
    //     #{if($parents == '()', &, $selectors)} {
    //         @content;

    //         @if selector-is-root-module($this) {
    //             @each $component in $components {
    //                 $component: if(map-get($config, $component), map-get($config, $component), ());
    //                 $content: merge-css-maps($content, $component);
    //             }
    //         }

    //         @include get-css-from-map($content);
    //     }
    // }
}

/// Render a component's content
///
/// @param {selector} $target
/// @param {list} $components
/// @param {map} $content
@mixin render-component($target, $components, $content, $config: if(variable-exists('config'), $config, ())) {
    @content;

    @if selector-is-root-module($target) {
        @each $component in $components {
            $component: if(map-get($config, $component), map-get($config, $component), ());
            $content: merge-css-maps($content, $component);
        }
    }

    @include get-css-from-map($content);
}

/// Alis for `component` mixin with $sub-component: true
///
/// @param {string|list} $components
/// @param {map} $content
/// @param {string} $glue
@mixin sub-component($components: null, $content: (), $glue: $component-glue) {
    @include component($components, $content, true, $glue) {
        @content;
    }
}

/// Alias for component() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $components - The component(s) you wish to create
@mixin components($components) {
    @include component($components) {
        @content;
    }
}