/// Create a component based off the main module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $components - The component or components to be used
///
/// @example
///
///     @include module('header') {
///         @include component('wrapper') {
///             ...
///         }
///     }
///
///     <div class="header_wrapper">...</div>
@mixin component($components: null, $content: (), $sub-component: false, $glue: $component-glue) {

    $parents     : ();
    $selectors   : '[class*="#{$module}#{$glue}"]';
    $tree        : module-tree(&);
    $namespace   : nth($tree, length($tree));

    @if not $sub-component {
        $namespace: $module;
    }

    @if $components {
        $selectors: ();

        @each $component in $components {
            $selector: '.#{$namespace}#{$glue}#{$component}, [class*="#{$namespace}#{$glue}#{$component}-"]';
            $selectors: join($selectors, $selector, comma);
        }
    }

    @each $selector in & {
        // spoof the selector into a list
        $selector: selector-parse(str-replace(inspect($selector), ' ', ', '));

        // if the last item isn't a modifier, remove it
        @if not str-index(inspect(nth($selector, length($selector))), '[class*="#{$modifier-glue}') {
            $selector: list-remove($selector, nth($selector, length($selector)));
        }

        @if length($selector) == 1 {
            $selector: nth($selector, 1);
        }

        // Re-build the parent selector
        $parents: append($parents, str-replace(inspect($selector), ', ', ' '), comma);
    }

    $parents: list-remove-duplicates($parents);

    @if length($parents) == 1 {
        $parents: nth($parents, 1);
        $parents: clean-selector($parents); // https://github.com/sass/libsass/issues/2520
    }

    @at-root #{if($parents == '()', $selectors, $parents)} {
        #{if($parents == '()', &, $selectors)} {
            @content;

            @each $component in $components {
                $component: if(map-get($config, $component), map-get($config, $component), ());
                $content: merge-css-maps($content, $component);
            }
        
            @include get-css-from-map($content);
        }
    }
}

/// Alis for `component` mixin with $sub-component: true
///
/// @param {string|list} $components
/// @param {map} $content
/// @param {string} $glue
@mixin sub-component($components: null, $content: (), $glue: $component-glue) {
    @include component($components, $content, true, $glue) {
        @content;
    }
}

/// Alias for component() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $components - The component(s) you wish to create
@mixin components($components) {
    @include component($components) {
        @content;
    }
}