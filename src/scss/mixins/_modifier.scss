/// Create a modifier for a module
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modifiers  - The modifier(s) which you wish to create
/// @param {string} $special [null] - Add special contextual options to modifier
/// @param {bool} $glue ['-'] - Desired modifier separator/glue
///
/// @example
///     @include module('button') {
///         @include modifier('large') {
///             ...
///         }
///     }
///
///     <div class="button-large">...</div>
@mixin modifier($modifiers, $special: null, $glue: $modifier-glue) {

    $selectors: &;

    //BEGIN TOMFOOLERY
    // $selectors: remove-duplicates($selectors, true);

    // @each $selector in $selectors {
    //     @if str-index(nth($selector, 1), '[class*="#{$module}#{$glue}"]') == 1 and length($selector) > 1 {
    //         $selectors: nth($selector, length($selector));
    //     }
    // }
    //END TOMFOOLERY

    $this: &;

    @if str-index(inspect($this), '.#{$module}') {
        @if (variable-exists('config') and map-get($config, 'selector-type') == 'flex')
        or (not variable-exists('config') and $selector-type == 'flex') {
            $selectors: ();

            @for $i from 1 through length($this) {
                @if $i % 2 == 0 {
                    $selectors: append($selectors, nth($this, $i), comma);
                }
            }
        }
    }

    @at-root #{$selectors} {
        $this: &;

        $modifier-selectors: ();

        @each $modifier in $modifiers {
            @if $special == 'not' {
                $modifier-selectors: join($modifier-selectors, '#{$this}:not([class*="#{$glue}#{$modifier}"])', comma);
            } @else {
                $modifier-selectors: join($modifier-selectors, '#{$this}[class*="#{$glue}#{$modifier}"]', comma);
            }
        }

        @at-root #{$modifier-selectors} {
            @content;
        }
    }

} // modifier()

/// Alias for modifier() mixin
///
/// @author [@esr360](http://twitter.com/esr360)
/// @access public
///
/// @param {string|list} $modifiers - The modifier(s) you wish to create
@mixin modifiers($modifiers) {
    @include modifier($modifiers) {
        @content;
    }
}