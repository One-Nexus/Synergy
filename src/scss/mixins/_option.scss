/// Apply styles to a module if a passed option returns true
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string} $option - The option which you wish to test against
///
/// @example
///     @mixin billboard($custom: ()) {
///
///         $billboard: config((
///             fullscreen : false
///         ), $custom);
///
///         @include module('billboard') {
///             @include option('fullscreen') {
///                 ...
///             }
///         }
///
///     }
///
///     @include billboard: ((
///         fullscreen : true
///     ));
@mixin option($option) {

    $option : $option !global;
    $value  : map-get($config, $option);

    // Determine if the option is enabled and whether the styles
    // should be output without the need for a modifier
    $enabled: if(
        (type-of($value) == bool and $value != false) or (type-of($value) == map and map-get($value, 'enabled') != false),
        true, false
    );

    // Create a unique, random placeholder to store styles
    $placeholder : $option + random(9999);

    // Store the styles in the placeholder
    @at-root %#{$placeholder} {
        @content;
    }

    // Output the styles if the option is enabled
    @if $enabled {
        @extend %#{$placeholder};
    }

    // Create a modifier for the option
    @if $extend-options {
        @include modifier($option) {
            @extend %#{$placeholder};
        }
    }

}