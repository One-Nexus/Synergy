/// Apply styles to a module if a passed option returns true
///
/// @author [@esr360](http://twitter.com/esr360)
/// @group Synergy
/// @access public
///
/// @param {string} $option - The option which you wish to test against
///
/// @example
///     @mixin billboard($custom: ()) {
///
///         $billboard: config((
///             fullscreen : false
///         ), $custom);
///
///         @include module('billboard') {
///             @include option('fullscreen') {
///                 ...
///             }
///         }
///
///     }
///
///     @include billboard: ((
///         fullscreen : true
///     ));
@mixin option($option-path...) {

    $value  : map-get-deep($config, $option-path...);
    $option : nth($option-path, length($option-path)) !global;

    // Create a unique, random placeholder to store styles
    $placeholder : $option + random(9999);

    // Store the styles in the placeholder
    @at-root %#{$placeholder} {
        @content;
    }

    // Output the styles if the option is enabled
    @if _enabled($value) {
        @at-root {
            @include overwrite($module) {
                @extend %#{$placeholder};
            }
        }
    }

    // Create a modifier for the option if it is not enabled
    // by default
    @if $extend-options and not _enabled($value) {
        @include modifier($option) {
            @extend %#{$placeholder};
        }
    }

}

// Determine if the option is enabled and whether the styles
// should be output without the need for a modifier
@function _enabled($value) {
    // If the value is a map
    @if type-of($value) == 'map' {
        // Does the map contain the 'enabled' key?
        @if map-has-key($value, 'enabled') {
            @return map-get($value, 'enabled');
        } @else {
            @return $value;
        }
    } 
    // If the value is a list
    @else if type-of($value) == 'list' {
        // Is the first value a bool?
        @if type-of(nth($value, 1)) == 'bool' {
            @return nth($value, 1);
        } @else {
            @return $value;
        }
    } @else {
        @return $value;
    }
}