/*-----------------------------------------------------------------

Modular
Made by @esr360
http://github.com/esr360/Modular/
	
-----------------------------------------------------------------*/

//-----------------------------------------------------------------
// Mixins
//-----------------------------------------------------------------

//  1. module()
//  2. component()
//  3. overwrite()
//  4. overwrite-component()
//  5. modifier()
//  6. nested-modifier()
//  7. extend()
//  8. context()
//  9. option()
//  10. value()

//-----------------------------------------------------------------

// 1. Module
// Define the main module
//-----------------------------------------------------------------

// 	Usage
// 
// 	@include module(header) {
//      ...
// 	}
//
// 	<div class="header">...</div>

// Set the default selector type (flex, chain, static)
$type: flex;

$module: null;
@mixin module($modules: map-get($config, name), $type: map-get($config, selector-type)) {
    $module: $modules !global;
    $selectors: ();
    @each $module in $modules {
        @if $type == flex or $type == static {
            $selectors: join($selectors, '.#{$module}', comma);
        }
        @if $type == flex or $type == chain {
            $selectors: join($selectors, '[class*="#{$module}-"]', comma);
        }
    }
    #{$selectors} {
        @content;
    }
}

// Alias for multiple modules
@mixin modules($modules, $type: $type) {
    @include module($modules, $type) {
        @content;
    }
}

// 2. Component
// Create a component based off the main module
//-----------------------------------------------------------------

//  Usage
//
//  @include module(header) {
//      @include component(wrapper) {
//          ...
//      }
//  }
//
//  <div class="header_wrapper">...</div>

@mixin component($components: null) {
    $selectors: '[class*="#{$module}_"]';
    @if $components != null {
        $selectors: ();
        @each $component in $components {
            $selectors: join($selectors, '[class*="#{$module}_#{$component}"]', comma);
        }
    }
    @at-root {
        #{$selectors} {
            @content;
        }
    }	
}

// Alias for multiple components
@mixin components($sub-components) {
    @include component($sub-components) {
        @content;
    }
}

// 3. Overwrite
// Overwrite a module in alternate context
//-----------------------------------------------------------------

//  Usage
//
//  @include module(header) {
//      @include overwrite(logo) {
//          ...
//      }
//  }
//
//  <div class="header">
//      <div class="logo">...</div>
//  </div>

@mixin overwrite($modules: map-get($config, name), $type: $type, $is: null, $not: null, $special: null) {
    $selectors: ();
    @if $is {
        $type: 'chain';
    }
    @each $module in $modules {
        $selector: #{$module};
        @if $type == flex or $type == static {
            @if $special == 'adjacent-sibling' {
                $selectors: join($selectors, '+ .#{$selector}', comma);
            } @else if $special == 'general-sibling' {
                $selectors: join($selectors, '~ .#{$selector}', comma);
            } @else {
                $selectors: join($selectors, '.#{$selector}', comma);
            }
        }
        @if $type == flex or $type == chain {
            @if $special == adjacent-sibling {
                $selectors: join($selectors, '+ [class*="#{$selector}-"]', comma);
            } @else if $special == 'general-sibling' {
                $selectors: join($selectors, '~ [class*="#{$selector}-"]', comma);
            }  @else {
                $selectors: join($selectors, '[class*="#{$selector}-"]', comma);
            }
        }
        @if $is {
            $modifiers-list: ();
            @each $modifier in $is {
                $selectors: join(
                    $modifiers-list, 
                    selector-append($selectors,'[class*="-#{$modifier}"]'), 
                comma);
            }
        }
        @if $not {
            $modifiers-list: ();
            @each $modifier in $not {
                $selectors: join(
                    $modifiers-list, 
                    selector-append($selectors,':not([class*="-#{$modifier}"])'), 
                comma);
            }
        }
    }
    #{$selectors} {
        @content;
    }
}

// 4. Overwrite-Component
// Overwrite a module component in alternate context
//-----------------------------------------------------------------

//  Usage
// 
//  @include module(form) {
//
//      @include component(input) {
//          ...
//      }
//
//      @include modifier(html5) {
//          @include overwrite-component(input) {
//              ...
//          }
//      }
//
//  }
//
//  <div class="form-html5">
//      <input class="form_input" type="text" />
//  </div>

@mixin overwrite-component($components, $parent: null, $is: null, $not: null, $special: null) {
    $module: if($parent != null, $parent, $module);
    $selectors: ();
    @each $component in $components {
        $selector: #{$module}_#{$component};
        @if $special == adjacent-sibling {
            $selectors: join($selectors, '+ [class*="#{$selector}"]', comma);
        } @else {
            $selectors: join($selectors, '[class*="#{$selector}"]', comma);
        }
        @if $is {
            $modifiers-list: ();
            @each $modifier in $is {
                $selectors: join(
                    $modifiers-list, 
                    selector-append($selectors,'[class*="-#{$modifier}"]'), 
                comma);
            }
        }
        @if $not {
            $modifiers-list: ();
            @each $modifier in $not {
                $selectors: join(
                    $modifiers-list, 
                    selector-append($selectors,':not([class*="-#{$modifier}"])'), 
                comma);
            }
        }
    }
    #{$selectors} {
        @content;
    }
}

// Alias for multiple components
@mixin overwrite-components($components, $type: $type) {
    @include overwrite-component($components, $type) {
        @content;
    }
}

// 5. Modifiers 
// Add a modifier to an existing module/component
//-----------------------------------------------------------------

//  Usage
//
//  @include module(button) {
//      @include modifier(large) {
//          ...
//      }
//  }
//
//  <div class="button-large">...</div>

@mixin modifier($modifiers, $special: null) {
    
    $selectors: &;
    
    @if length(&) != 1 {
        @if map-get($config, selector-type) == flex {
            $selectors: ();
            $i: 1;
            @each $item in & {
                $i: $i + 1;
                @if $i == 2 {
                    $i: 0;
                }@else{
                    $selectors: append($selectors, $item, comma);
                }
            }
        }
    }
    
    @at-root #{$selectors} {
        $modifier-selectors: ();
        @each $modifier in $modifiers {
            @if $special == "not" {
                $modifier-selectors: join($modifier-selectors, '&:not([class*="-#{$modifier}"])', comma);
            } @else {
                $modifier-selectors: join($modifier-selectors, '&[class*="-#{$modifier}"]', comma);
            }
        }
        #{$modifier-selectors} {
            @content;
        }
    }

} // modifier()

// Alias for multiple modifiers
@mixin modifiers($modifiers) {
    @include modifier($modifiers) {
        @content;
    }
}

// 6. Nested Modifier
// Nest a modifier for appropriate specificity
//-----------------------------------------------------------------

//  Usage
//
//  @include module(button) {
//      @include modifier(white) {
//          @include nested-modifier(border) {
//              ...
//          }
//      }
//  }
//
//  <div class="button-white-border">...</div>

@mixin nested-modifier($modifiers) {
    $selectors: ();
    @each $modifier in $modifiers {
        $selectors: join($selectors, '&[class*="-#{$modifier}"]', comma);
    }
    @at-root #{$selectors} {
        @content;
    }
}

// Alias for multiple modifiers
@mixin nested-modifiers($modifiers) {
    @include nested-modifier($modifiers) {
        @content;
    }
}

// 7. Extend Modifiers
// Extend one or more modifiers of a module
//-----------------------------------------------------------------

//  Usage
//
//  @include module(button) {
//
//      @include modifier(round)   {...}
//      @include modifier(large)   {...}
//      @include modifier(success) {...}
//
//      @include modifier(primary) {
//          @include extend((round, large, success));
//      }	
//
//  }
//
//  <div class="button-primary">...</div>

@mixin extend($modifiers: null, $parent: null, $core: false) {
    @if $core {
        @extend .#{$parent}
    }
    @each $modifier in $modifiers {
        @if type-of($modifier) == string {
            $selector: if(
                $parent, $parent, $module
            );
            @extend [class*="#{$selector}-"][class*="-#{$modifier}"];
        } @else if type-of($modifier) == list {
            $selectors: if(
                $parent,
                ('[class*="#{$parent}-"]'),
                ('[class*="#{$module}-"]')
            );
            @each $item in $modifier {
                $selectors: join($selectors, '[class*="-#{$item}"]', comma);
            }
            @extend #{$selectors};
        }
    }
}

// 8. Context
// Apply styles when in special context
//-----------------------------------------------------------------

@mixin context($context) {
    $child-selectors: &;
    $selectors: ();
    @each $item in $context {
        @if map-get($config, selector-type) == flex or map-get($config, selector-type) == static {
            $selectors: join($selectors, '.#{$module}', comma);
        }
        @if map-get($config, selector-type) == flex or map-get($config, selector-type) == chain {
            $selectors: join($selectors, '[class*="#{$module}-"]', comma);
        }
    }
    @if $context == 'parent-hovered' {
        @at-root {
            #{$selectors} {
                &:hover {
                    #{$child-selectors} {
                        @content;
                    }
                }
            }
        }
    }
}

// 9. Option
// Add a configurable option to a module
//-----------------------------------------------------------------

//  Usage
//
//  @mixin billboard($custom: ()) {
//
//      $billboard: config((
//          full-screen : false
//      ), $custom);
//
//      @include module(billboard) {
//          @include option(full-screen) {
//              ...
//          }
//      }
//
//  }
//
//  @include billboard: ((
//      full-screen : true
//  ));

// Extend each option as a modifier by default?
$extend-options: true;

@mixin option($option) {
    $option: $option !global;
    $enabled: if(
        (type-of(map-get($config, $option)) == bool and map-get($config, $option) != false) or
        (type-of(map-get($config, $option)) == map and map-get(map-get($config, $option), default) != false),
        true, false
    );
    @if $enabled {
        @include extend($option);
    }
    @include modifier($option) {	
        @content;
    }
}

// 10. Value
// Style when option is a certain value
//-----------------------------------------------------------------

//  Usage
//
//  @mixin header($custom: ()) {
//
//      $header: config((
//          side : false
//      ), $custom);
//
//      @include module(header) {
//          @include option(side) {
//              @include value(left) {
//                  ...
//              }
//          }
//      }
//
//  }
//
//  @include header: ((
//      side : left
//  ));

@mixin value($setting: default, $value: true) {
    $nested-modifier: if(
        $setting == default, $value, $setting
    );
    @if (option($config, $option, $setting) == $value) {	
        @if $setting == default {
            @include extend($value);
        } @else {
            @include extend($setting);
        }
    }
    @include nested-modifier($nested-modifier) {	
        @content;
    }
}

//-----------------------------------------------------------------
// Advanced Functions
//-----------------------------------------------------------------

// Module configuration
//-----------------------------------------------------------------

// Enable JSON output?
$to-JSON    : false !default;

// Output config for each module by default?
$output-JSON: false !default;

$config-JSON: ();

@function config($map-old, $map-new) {
	
	$map-old: map-merge((
		selector-type   : $type,
		extend-settings : $extend-options,
		output-JSON     : $output-JSON
	), $map-old);
	
	$map-old: map-merge-deep($map-old, $map-new);
	
	// Store merged map in a variable
	$config: $map-old !global;
	
	// Output options to JSON
	@if option($map-old, output-JSON) {
		$config-JSON: map-merge-deep(
			(map-get($map-old, name): ($map-old)), 
			$config-JSON
		) !global;
	}
	
	// Return merged map
	@return $map-old;
	
} // config()

// Map-Set Function
// http://git.io/vmBKD
//-----------------------------------------------------------------

@function get-keys($keys, $counter) {
	$return: ();
	@for $i from 1 to $counter {
		$return: append($return, nth($keys, $i));
	}
	@return $return;
}

@function map-set($map, $key, $value) {
	@return map-merge($map, ($key: $value));
}

@function map-set-deep($map, $keys, $value) {
	$private-sassy-maps-suppress-warnings: true !global;
	$length: length($keys);
	$get-keys: ();
	$map-level: ();
	@if $length > 1 {
		$get-keys: get-keys($keys, $length);
		$map-level: map-get-deep($map, $get-keys);
	}
  	$merge: (nth($keys, $length): $value);
	@if $map-level {
		$merge: map-merge($map-level, $merge);
	}
	@for $i from ($length * -1 + 1) through -1 {
		$j: abs($i);
		$key: nth($keys, $j);
		// @debug $get-keys;
		@if $j > 1 {
			$get-keys: get-keys($keys, $j);
			$map-level: map-get-deep($map, $get-keys);
			@if $map-level {
				$merge: map-merge($map-level, ($key: $merge));
			}
			@else {
				$merge: ($key: $merge);
			}
		}
		@else {
			$merge: ($key: $merge);
		}
	}
	$map: map-merge($map, $merge);
	$private-sassy-maps-suppress-warnings: false !global;
	@return $map;
}

// Map Deep Merge
// http://git.io/vmBVH
//-----------------------------------------------------------------

@function map-merge-deep($map-old, $map-new, $overwrite: true) {

	// Iterate through each value of the new map
	@each $key, $new-value in $map-new {
		// Check if that value already exists on the old map
		@if map-has-key($map-old, $key) {
			// There is an existing key
			$old-value: map-get($map-old, $key);
			@if type-of($new-value) == map and type-of($old-value) == map {
				// If both are maps, recurse regardless of $overwrite
				$merged-value: map-merge-deep($old-value, $new-value);
				$map-old: map-set($map-old, $key, $merged-value);	
			} @else {
				// Otherwise check $overwrite
				@if $overwrite{
					$map-old: map-set($map-old, $key, $new-value);
				}
			}
		} @else {
			// There is no existing key to add
			$map-old: map-set($map-old, $key, $new-value);
		}
	}
	@return $map-old;
	
}

// Map Deep Get
// https://css-tricks.com/snippets/sass/deep-getset-maps/
//-----------------------------------------------------------------

@function option($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
    }
    @return $map;
}

// Alias for settings
@function setting($map, $keys...) {
    @return option($map, $keys...);
}