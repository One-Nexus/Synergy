/*-----------------------------------------------------------------

Modular
Made by @esr360
http://github.com/esr360/Modular/
	
-----------------------------------------------------------------*/

//-----------------------------------------------------------------
// Mixins
//-----------------------------------------------------------------

//	1. component()
//	2. sub-component()
// 	3. overwrite()
//	4. overwrite-sub()
//	5. modifier()
//	6. nested-modifier()
//	7. extend-modifiers()
//	8. setting()
// 	9. option()

//-----------------------------------------------------------------

// 1. Component
// Define the main component
//-----------------------------------------------------------------

// 	Usage
// 
// 	@include component(header) {
//		...
// 	}
//
// 	<div class="header">...</div>

// Set the default selector type (flex, chain, static)
$type: flex;

@mixin component($components, $type: map-get($config, selector-type)) {
	$component: $components !global;
	$selectors: ();
	@each $component in $components {
		@if $type == flex {
			$selectors: join($selectors, '.#{$component}');
			$selectors: join($selectors, '[class*="#{$component}-"]');
		} @else if $type == chain {
			$selectors: join($selectors, '[class*="#{$component}-"]');
		} @else if $type == static {
			$selectors: join($selectors, '.#{$component}');
		}
	}
	$selectors: to-string($selectors, ", ");
	#{$selectors} {
		@content;
	}
}

// Alias for multiple components
@mixin components($components, $type: $type) {
	@include component($components, $type) {
		@content;
	}
}

// 2. Sub-Component
// Create a sub-component based off the main component
//-----------------------------------------------------------------

// 	Usage
//
//	@include component(header) {
//		@include sub-component(wrapper) {
//			...
//		}
//	}
//
//	<div class="header_wrapper">...</div>

@mixin sub-component($sub-components, $type: $type) {
	$selectors: ();
	@each $sub-component in $sub-components {
		@if $type == flex {
			$selectors: join($selectors, '.#{$component}_#{$sub-component}');
			$selectors: join($selectors, '[class*="#{$component}_#{$sub-component}-"]');
		} @else if $type == chain {
			$selectors: join($selectors, '[class*="#{$component}_#{$sub-component}-"]');
		} @else if $type == static {
			$selectors: join($selectors, '.#{$component}_#{$sub-component}');
		}
	}
	$selectors: to-string($selectors, ", ");
	@at-root {
		#{$selectors} {
			@content;
		}
	}	
}

// Alias for multiple components
@mixin sub-components($sub-components, $type: $type) {
	@include sub-component($sub-components, $type) {
		@content;
	}
}

// 3. Overwrite
// Overwrite a component in alternate context
//-----------------------------------------------------------------

// 	Usage
// 
// 	@include component(header) {
//		@include overwrite(logo) {
//			...
//		}
// 	}
//
// 	<div class="header">
//		<div class="logo">...</div>
//	</div>

@mixin overwrite($components, $type: $type) {
	$selectors: ();
	@each $component in $components {
		@if $type == flex {
			$selectors: join($selectors, '.#{$component}');
			$selectors: join($selectors, '[class*="#{$component}-"]');
		} @else if $type == chain {
			$selectors: join($selectors, '[class*="#{$component}-"]');
		} @else if $type == static {
			$selectors: join($selectors, '.#{$component}');
		}
	}
	$selectors: to-string($selectors, ", ");
	#{$selectors} {
		@content;
	}
}

// 4. Overwrite-Sub
// Overwrite a sub-component in alternate context
//-----------------------------------------------------------------

// 	Usage
// 
// 	@include component(form) {
//
//		@include sub-component(input) {
//			...
//		}
//
//		@include modifier(html5) {
//			@include overwrite-sub(input) {
//				...
//			}
//		}
//
// 	}
//
// 	<div class="form-html5">
//		<input class="form_input" type="text" />
//	</div>

@mixin overwrite-sub($sub-components, $type: $type, $parent: null) {
	$component: if($parent != null, $parent, $component);
	$selectors: ();
	@each $sub-component in $sub-components {
		@if $type == flex {
			$selectors: join($selectors, '.#{$component}_#{$sub-component}');
			$selectors: join($selectors, '[class*="#{$component}_#{$sub-component}-"]');
		} @else if $type == chain {
			$selectors: join($selectors, '[class*="#{$component}_#{$sub-component}-"]');
		} @else if $type == static {
			$selectors: join($selectors, '.#{$component}_#{$sub-component}');
		}
	}
	$selectors: to-string($selectors, ", ");
	#{$selectors} {
		@content;
	}
}

// Alias for multiple components
@mixin overwrite-subs($sub-components, $type: $type) {
	@include overwrite-sub($sub-components, $type) {
		@content;
	}
}

// 5. Modifiers 
// Add a modifier to an existing component
//-----------------------------------------------------------------

//	Usage
//
//	@include component(button) {
//		@include modifier(large) {
//			...
//		}
//	}
//
//	<div class="button-large">...</div>

@mixin modifier($modifiers) {
	$selectors: &;
	@if map-get($config, selector-type) == flex {
		$selectors: ();
		$i: 1;
		@each $item in & {
		    $i: $i + 1;
		    @if $i == 2 {
		        $i: 0;
		    }@else{
		        $selectors: append($selectors, $item);
		    }
		}
		$selectors: to-string($selectors, ", ");
	} @else {
		$selectors: &;
	}
	@at-root #{$selectors} {
		$modifier-selectors: ();
		@each $modifier in $modifiers {
			$modifier-selectors: join($modifier-selectors, '&[class*="-#{$modifier}"]')
		}
		$modifier-selectors: to-string($modifier-selectors, ", ");
		#{$modifier-selectors} {
			@content;
		}
	}
}

// Alias for multiple modifiers
@mixin modifiers($modifiers) {
	@include modifier($modifiers) {
		@content;
	}
}

// 6. Nested Modifier
// Nest a modifier for appropriate specificity
//-----------------------------------------------------------------

//	Usage
//
//	@include component(button) {
//		@include modifier(white) {
//			@include nested-modifier(border) {
//				...
//			}
//		}
//	}
//
//	<div class="button-white-border">...</div>

@mixin nested-modifier($modifiers) {
	$selectors: ();
	@each $modifier in $modifiers {
		$selectors: join($selectors, '&[class*="-#{$modifier}"]');
	}
	$selectors: to-string($selectors, ", ");
	#{$selectors} {
		@content;
	}
}

// Alias for multiple modifiers
@mixin nested-modifiers($modifiers) {
	@include nested-modifier($modifiers) {
		@content;
	}
}

// 7. Extend Modifiers
// Extend one or more modifiers of a component
//-----------------------------------------------------------------

//	Usage

//	@include component(button) {
//
//		@include modifier(round)   {...}
//		@include modifier(large)  {...}
//		@include modifier(success) {...}
//
//		@include modifier(primary) {
//			@include extend(round, large, success);
//		}	
//
//	}
//
//	<div class="button-primary">...</div>

@mixin extend($modifiers...) {
	@each $modifier in $modifiers {
		@extend [class*="#{$component}-"][class*="-#{$modifier}"];
	}
}

// 8. Setting
// Add a configurable setting to a component
//-----------------------------------------------------------------

//	Usage
//
//	@mixin billboard($config: ()) {
//
//		$billboard: config((
//			full-screen : false
//		), $config);
//		
//		$config: $billboard !global;
//
//		@include component(billboard) {
//			@include setting(full-screen) {
//				...
//			}
//		}
//
//	}
//
//	@include billboard: ((
//		full-screen : true
//	));

// Extend each setting as a modifier by default?
$extend-settings: true;

@mixin setting($setting) {
	$setting: $setting !global;
	@at-root %#{$component}-#{$setting} {	
		@content;
	}
	@if map-get($config, $setting) != false {
		@extend %#{$component}-#{$setting};
	}
	@if map-get($config, extend-settings) {
		@include nested-modifier($setting) {	
			@extend %#{$component}-#{$setting};
		}
	}
}

// 9. Option
// Add an option to an existing setting
//-----------------------------------------------------------------

//	Usage
//
//	@mixin header($config: ()) {
//
//		$header: config((
//			side : false
//		), $config);
//		
//		$config: $header !global;
//
//		@include component(header) {
//			@include setting(side) {
//				@include option(left) {
//					...
//				}
//				@include option(right) {
//					...
//				}
//			}
//		}
//
//	}
//
//	@include header: ((
//		side : left
//	));

@mixin option($option) {
	@at-root %#{$component}-#{$option} {	
		@content;
	}
	@if map-get($config, $setting) == $option {
		@extend %#{$component}-#{$option};
	}
	@if map-get($config, extend-settings) {
		@include modifier($option) {
			@extend %#{$component}-#{$option};
		}
	}
}

//-----------------------------------------------------------------
// Advanced Functions
//-----------------------------------------------------------------

// To String
// http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
// Customized for use with Modular
//-----------------------------------------------------------------

@function to-string($list, $glue: '', $is-nested: false, $recursive: false) {
	$result: null;
	@for $i from 1 through length($list) {
		$e: nth($list, $i);
		@if type-of($e) == list and $recursive {
			$result: $result#{to-string($e, $glue, true)};
		}  
		@else {
			$result: if($i != length($list) or $is-nested, $result#{$e}#{$glue}, $result#{$e});
		}
	}
	@return $result;
}

// Map-Set Function
// http://git.io/vmBKD
//-----------------------------------------------------------------

@function get-keys($keys, $counter) {
	$return: ();
	@for $i from 1 to $counter {
		$return: append($return, nth($keys, $i));
	}
	@return $return;
}

@function map-set($map, $key, $value) {
	@return map-merge($map, ($key: $value));
}

@function map-set-deep($map, $keys, $value) {
	$private-sassy-maps-suppress-warnings: true !global;
	$length: length($keys);
	$get-keys: ();
	$map-level: ();
	@if $length > 1 {
		$get-keys: get-keys($keys, $length);
		$map-level: map-get-deep($map, $get-keys);
	}
  	$merge: (nth($keys, $length): $value);
	@if $map-level {
		$merge: map-merge($map-level, $merge);
	}
	@for $i from ($length * -1 + 1) through -1 {
		$j: abs($i);
		$key: nth($keys, $j);
		// @debug $get-keys;
		@if $j > 1 {
			$get-keys: get-keys($keys, $j);
			$map-level: map-get-deep($map, $get-keys);
			@if $map-level {
				$merge: map-merge($map-level, ($key: $merge));
			}
			@else {
				$merge: ($key: $merge);
			}
		}
		@else {
			$merge: ($key: $merge);
		}
	}
	$map: map-merge($map, $merge);
	$private-sassy-maps-suppress-warnings: false !global;
	@return $map;
}

// Map Deep Merge
// http://git.io/vmBVH
// Customized for use with Modular
//-----------------------------------------------------------------

@function config($map-old, $map-new, $overwrite: true, $nested: false) {
	// Custom code to set default keys for a component
	@if not $nested {
		$map-old: map-merge((
			selector-type   : $type,
			extend-settings : $extend-settings
		), $map-old);
	}
	// Iterate through each value of the new map
	@each $key, $new-value in $map-new {
		// Check if that value already exists on the old map
		@if map-has-key($map-old, $key) {
			// There is an existing key
			$old-value: map-get($map-old, $key);
			@if type-of($new-value) == map and type-of($old-value) == map {
				// If both are maps, recurse regardless of $overwrite
				$merged-value: config($old-value, $new-value, $nested: true);
				$map-old: map-set($map-old, $key, $merged-value);	
			} @else {
				// Otherwise check $overwrite
				@if $overwrite{
					$map-old: map-set($map-old, $key, $new-value);
				}
			}
		} @else {
			// There is no existing key to add
			$map-old: map-set($map-old, $key, $new-value);
		}
	}
	@return $map-old;
}